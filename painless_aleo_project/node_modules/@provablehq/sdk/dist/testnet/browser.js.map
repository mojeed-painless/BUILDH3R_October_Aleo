{"version":3,"file":"browser.js","sources":["../../src/account.ts","../../src/utils.ts","../../src/network-client.ts","../../src/function-key-provider.ts","../../src/offline-key-provider.ts","../../src/record-provider.ts","../../src/managed-worker.ts","../../src/program-manager.ts","../../src/browser.ts"],"sourcesContent":["import {\n  Address,\n  PrivateKey,\n  Signature,\n  ViewKey,\n  PrivateKeyCiphertext,\n  RecordCiphertext,\n} from \"./browser\";\n\ninterface AccountParam {\n  privateKey?: string;\n  seed?: Uint8Array;\n}\n\n/**\n * Key Management class. Enables the creation of a new Aleo Account, importation of an existing account from\n * an existing private key or seed, and message signing and verification functionality.\n *\n * An Aleo Account is generated from a randomly generated seed (number) from which an account private key, view key,\n * and a public account address are derived. The private key lies at the root of an Aleo account. It is a highly\n * sensitive secret and should be protected as it allows for creation of Aleo Program executions and arbitrary value\n * transfers. The View Key allows for decryption of a user's activity on the blockchain. The Address is the public\n * address to which other users of Aleo can send Aleo credits and other records to. This class should only be used\n * environments where the safety of the underlying key material can be assured.\n *\n * @example\n * // Create a new account\n * const myRandomAccount = new Account();\n *\n * // Create an account from a randomly generated seed\n * const seed = new Uint8Array([94, 91, 52, 251, 240, 230, 226, 35, 117, 253, 224, 210, 175, 13, 205, 120, 155, 214, 7, 169, 66, 62, 206, 50, 188, 40, 29, 122, 40, 250, 54, 18]);\n * const mySeededAccount = new Account({seed: seed});\n *\n * // Create an account from an existing private key\n * const myExistingAccount = new Account({privateKey: 'myExistingPrivateKey'})\n *\n * // Sign a message\n * const hello_world = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n * const signature = myRandomAccount.sign(hello_world)\n *\n * // Verify a signature\n * myRandomAccount.verify(hello_world, signature)\n */\nexport class Account {\n  _privateKey: PrivateKey;\n  _viewKey: ViewKey;\n  _address: Address;\n\n  constructor(params: AccountParam = {}) {\n    try {\n      this._privateKey = this.privateKeyFromParams(params);\n    } catch (e) {\n      console.error(\"Wrong parameter\", e);\n      throw new Error(\"Wrong Parameter\");\n    }\n    this._viewKey = ViewKey.from_private_key(this._privateKey);\n    this._address = Address.from_private_key(this._privateKey);\n  }\n\n  /**\n   * Attempts to create an account from a private key ciphertext\n   * @param {PrivateKeyCiphertext | string} ciphertext\n   * @param {string} password\n   * @returns {PrivateKey}\n   *\n   * @example\n   * const ciphertext = PrivateKey.newEncrypted(\"password\");\n   * const account = Account.fromCiphertext(ciphertext, \"password\");\n   */\n  public static fromCiphertext(ciphertext: PrivateKeyCiphertext | string, password: string) {\n    try {\n      ciphertext = (typeof ciphertext === \"string\") ? PrivateKeyCiphertext.fromString(ciphertext) : ciphertext;\n      const _privateKey = PrivateKey.fromPrivateKeyCiphertext(ciphertext, password);\n      return new Account({ privateKey: _privateKey.to_string() });\n    } catch(e) {\n      throw new Error(\"Wrong password or invalid ciphertext\");\n    }\n  }\n\n  private privateKeyFromParams(params: AccountParam) {\n    if (params.seed) {\n      return PrivateKey.from_seed_unchecked(params.seed);\n    }\n    if (params.privateKey) {\n      return PrivateKey.from_string(params.privateKey);\n    }\n    return new PrivateKey();\n  }\n\n  privateKey() {\n    return this._privateKey;\n  }\n\n  viewKey() {\n    return this._viewKey;\n  }\n\n  address() {\n    return this._address;\n  }\n\n  toString() {\n    return this.address().to_string()\n  }\n\n  /**\n   * Encrypt the account's private key with a password\n   * @param {string} ciphertext\n   * @returns {PrivateKeyCiphertext}\n   *\n   * @example\n   * const account = new Account();\n   * const ciphertext = account.encryptAccount(\"password\");\n   */\n  encryptAccount(password: string) {\n    return this._privateKey.toCiphertext(password);\n  }\n\n  /**\n   * Decrypts a Record in ciphertext form into plaintext\n   * @param {string} ciphertext\n   * @returns {Record}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecord(\"record1ciphertext\");\n   */\n  decryptRecord(ciphertext: string) {\n    return this._viewKey.decrypt(ciphertext);\n  }\n\n  /**\n   * Decrypts an array of Records in ciphertext form into plaintext\n   * @param {string[]} ciphertexts\n   * @returns {Record[]}\n   *\n   * @example\n   * const account = new Account();\n   * const record = account.decryptRecords([\"record1ciphertext\", \"record2ciphertext\"]);\n   */\n  decryptRecords(ciphertexts: string[]) {\n    return ciphertexts.map((ciphertext) => this._viewKey.decrypt(ciphertext));\n  }\n\n  /**\n   * Determines whether the account owns a ciphertext record\n   * @param {RecordCipherText | string} ciphertext\n   * @returns {boolean}\n   *\n   * @example\n   * // Create a connection to the Aleo network and an account\n   * const connection = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n   * const account = Account.fromCiphertext(\"ciphertext\", \"password\");\n   *\n   * // Get a record from the network\n   * const record = connection.getBlock(1234);\n   * const recordCipherText = record.transactions[0].execution.transitions[0].id;\n   *\n   * // Check if the account owns the record\n   * if account.ownsRecord(recordCipherText) {\n   *     // Then one can do something like:\n   *     // Decrypt the record and check if it's spent\n   *     // Store the record in a local database\n   *     // Etc.\n   * }\n   */\n  ownsRecordCiphertext(ciphertext: RecordCiphertext | string) {\n    if (typeof ciphertext === 'string') {\n      try {\n        const ciphertextObject = RecordCiphertext.fromString(ciphertext);\n        return ciphertextObject.isOwner(this._viewKey);\n      }\n      catch (e) {\n        return false;\n      }\n    }\n    else {\n      return ciphertext.isOwner(this._viewKey);\n    }\n  }\n\n  /**\n   * Signs a message with the account's private key.\n   * Returns a Signature.\n   *\n   * @param {Uint8Array} message\n   * @returns {Signature}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * account.sign(message);\n   */\n  sign(message: Uint8Array) {\n    return this._privateKey.sign(message);\n  }\n\n  /**\n   * Verifies the Signature on a message.\n   *\n   * @param {Uint8Array} message\n   * @param {Signature} signature\n   * @returns {boolean}\n   *\n   * @example\n   * const account = new Account();\n   * const message = Uint8Array.from([104, 101, 108, 108, 111 119, 111, 114, 108, 100])\n   * const signature = account.sign(message);\n   * account.verify(message, signature);\n   */\n  verify(message: Uint8Array, signature: Signature) {\n    return this._address.verify(message, signature);\n  }\n\n}\n","export function parseJSON(json: string): any {\n    function revive(key: string, value: any, context: any) {\n        if (Number.isInteger(value)) {\n            return BigInt(context.source);\n\n        } else {\n            return value;\n        }\n    }\n\n    return JSON.parse(json, revive as any);\n}\n\n\nexport async function get(url: URL | string, options?: RequestInit) {\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not get URL \" + url);\n    }\n\n    return response;\n}\n\n\nexport async function post(url: URL | string, options: RequestInit) {\n    options.method = \"POST\";\n\n    const response = await fetch(url, options);\n\n    if (!response.ok) {\n        throw new Error(response.status + \" could not post URL \" + url);\n    }\n\n    return response;\n}\n","import { get, post, parseJSON } from \"./utils\";\nimport {\n  Account,\n  Block,\n  RecordCiphertext,\n  Program,\n  RecordPlaintext,\n  PrivateKey,\n  Transaction,\n  TransactionModel,\n  logAndThrow\n} from \"./browser\";\n\ntype ProgramImports = { [key: string]: string | Program };\n\ninterface AleoNetworkClientOptions {\n  headers?: { [key: string]: string };\n}\n\n/**\n * Client library that encapsulates REST calls to publicly exposed endpoints of Aleo nodes. The methods provided in this\n * allow users to query public information from the Aleo blockchain and submit transactions to the network.\n *\n * @param {string} host\n * @example\n * // Connection to a local node\n * const localNetworkClient = new AleoNetworkClient(\"http://localhost:3030\");\n *\n * // Connection to a public beacon node\n * const publicnetworkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n */\nclass AleoNetworkClient {\n  host: string;\n  headers: { [key: string]: string };\n  account: Account | undefined;\n\n  constructor(host: string, options?: AleoNetworkClientOptions) {\n    this.host = host + \"/%%NETWORK%%\";\n\n    if (options && options.headers) {\n      this.headers = options.headers;\n\n    } else {\n      this.headers = {\n        // This is replaced by the actual version by a Rollup plugin\n        \"X-Aleo-SDK-Version\": \"%%VERSION%%\",\n      };\n    }\n  }\n\n  /**\n   * Set an account to use in networkClient calls\n   *\n   * @param {Account} account\n   * @example\n   * const account = new Account();\n   * networkClient.setAccount(account);\n   */\n  setAccount(account: Account) {\n    this.account = account;\n  }\n\n  /**\n   * Return the Aleo account used in the networkClient\n   *\n   * @example\n   * const account = networkClient.getAccount();\n   */\n  getAccount(): Account | undefined {\n    return this.account;\n  }\n\n  /**\n   * Set a new host for the networkClient\n   *\n   * @param {string} host The address of a node hosting the Aleo API\n   * @param host\n   */\n  setHost(host: string) {\n    this.host = host + \"/%%NETWORK%%\";\n  }\n\n  async fetchData<Type>(\n      url = \"/\",\n  ): Promise<Type> {\n    try {\n      const response = await get(this.host + url, {\n        headers: this.headers\n      });\n\n      const text = await response.text();\n      return parseJSON(text);\n\n    } catch (error) {\n      throw new Error(\"Error fetching data.\");\n    }\n  }\n\n  /**\n   * Attempts to find unspent records in the Aleo blockchain for a specified private key\n   * @param {number} startHeight - The height at which to start searching for unspent records\n   * @param {number} endHeight - The height at which to stop searching for unspent records\n   * @param {string | PrivateKey} privateKey - The private key to use to find unspent records\n   * @param {number[]} amounts - The amounts (in microcredits) to search for (eg. [100, 200, 3000])\n   * @param {number} maxMicrocredits - The maximum number of microcredits to search for\n   * @param {string[]} nonces - The nonces of already found records to exclude from the search\n   *\n   * @example\n   * // Find all unspent records\n   * const privateKey = \"[PRIVATE_KEY]\";\n   * const records = networkClient.findUnspentRecords(0, undefined, privateKey);\n   *\n   * // Find specific amounts\n   * const startHeight = 500000;\n   * const amounts = [600000, 1000000];\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, amounts);\n   *\n   * // Find specific amounts with a maximum number of cumulative microcredits\n   * const maxMicrocredits = 100000;\n   * const records = networkClient.findUnspentRecords(startHeight, undefined, privateKey, undefined, maxMicrocredits);\n   */\n  async findUnspentRecords(\n      startHeight: number,\n      endHeight: number | undefined,\n      privateKey: string | PrivateKey | undefined,\n      amounts: number[] | undefined,\n      maxMicrocredits?: number | undefined,\n      nonces?: string[] | undefined,\n  ): Promise<Array<RecordPlaintext>> {\n    nonces = nonces || [];\n    // Ensure start height is not negative\n    if (startHeight < 0) {\n      throw new Error(\"Start height must be greater than or equal to 0\");\n    }\n\n    // Initialize search parameters\n    const records = new Array<RecordPlaintext>();\n    let start;\n    let end;\n    let resolvedPrivateKey: PrivateKey;\n    let failures = 0;\n    let totalRecordValue = BigInt(0);\n    let latestHeight: number;\n\n    // Ensure a private key is present to find owned records\n    if (typeof privateKey === \"undefined\") {\n      if (typeof this.account === \"undefined\") {\n        throw new Error(\"Private key must be specified in an argument to findOwnedRecords or set in the AleoNetworkClient\");\n      } else {\n        resolvedPrivateKey = this.account._privateKey;\n      }\n    } else {\n      try {\n        resolvedPrivateKey = privateKey instanceof PrivateKey ? privateKey : PrivateKey.from_string(privateKey);\n      } catch (error) {\n        throw new Error(\"Error parsing private key provided.\");\n      }\n    }\n    const viewKey = resolvedPrivateKey.to_view_key();\n\n    // Get the latest height to ensure the range being searched is valid\n    try {\n      const blockHeight = await this.getLatestHeight();\n      if (typeof blockHeight === \"number\") {\n        latestHeight = blockHeight;\n      } else {\n        throw new Error(\"Error fetching latest block height.\");\n      }\n    } catch (error) {\n      throw new Error(\"Error fetching latest block height.\");\n    }\n\n    // If no end height is specified or is greater than the latest height, set the end height to the latest height\n    if (typeof endHeight === \"number\" && endHeight <= latestHeight) {\n      end = endHeight\n    } else {\n      end = latestHeight;\n    }\n\n    // If the starting is greater than the ending height, return an error\n    if (startHeight > end) {\n      throw new Error(\"Start height must be less than or equal to end height.\");\n    }\n\n    // Iterate through blocks in reverse order in chunks of 50\n    while (end > startHeight) {\n      start = end - 50;\n      if (start < startHeight) {\n        start = startHeight;\n      }\n      try {\n        // Get 50 blocks (or the difference between the start and end if less than 50)\n        const blocks = await this.getBlockRange(start, end);\n        end = start;\n        // Iterate through blocks to find unspent records\n        for (let i = 0; i < blocks.length; i++) {\n          const block = blocks[i];\n          const transactions = block.transactions;\n          if (!(typeof transactions === \"undefined\")) {\n            for (let j = 0; j < transactions.length; j++) {\n              const confirmedTransaction = transactions[j];\n              // Search for unspent records in execute transactions of credits.aleo\n              if (confirmedTransaction.type == \"execute\") {\n                const transaction = confirmedTransaction.transaction;\n                if (transaction.execution && !(typeof transaction.execution.transitions == \"undefined\")) {\n                  for (let k = 0; k < transaction.execution.transitions.length; k++) {\n                    const transition = transaction.execution.transitions[k];\n                    // Only search for unspent records in credits.aleo (for now)\n                    if (transition.program !== \"credits.aleo\") {\n                      continue;\n                    }\n                    if (!(typeof transition.outputs == \"undefined\")) {\n                      for (let l = 0; l < transition.outputs.length; l++) {\n                        const output = transition.outputs[l];\n                        if (output.type === \"record\") {\n                          try {\n                            // Create a wasm record ciphertext object from the found output\n                            const record = RecordCiphertext.fromString(output.value);\n                            // Determine if the record is owned by the specified view key\n                            if (record.isOwner(viewKey)) {\n                              // Decrypt the record and get the serial number\n                              const recordPlaintext = record.decrypt(viewKey);\n\n                              // If the record has already been found, skip it\n                              const nonce = recordPlaintext.nonce();\n                              if (nonces.includes(nonce)) {\n                                continue;\n                              }\n\n                              // Otherwise record the nonce that has been found\n                              const serialNumber = recordPlaintext.serialNumberString(resolvedPrivateKey, \"credits.aleo\", \"credits\");\n                              // Attempt to see if the serial number is spent\n                              try {\n                                await this.getTransitionId(serialNumber);\n                              } catch (error) {\n                                // If it's not found, add it to the list of unspent records\n                                if (!amounts) {\n                                  records.push(recordPlaintext);\n                                  // If the user specified a maximum number of microcredits, check if the search has found enough\n                                  if (typeof maxMicrocredits === \"number\") {\n                                    totalRecordValue += recordPlaintext.microcredits();\n                                    // Exit if the search has found the amount specified\n                                    if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                      return records;\n                                    }\n                                  }\n                                }\n                                // If the user specified a list of amounts, check if the search has found them\n                                if (!(typeof amounts === \"undefined\") && amounts.length > 0) {\n                                  let amounts_found = 0;\n                                  if (recordPlaintext.microcredits() > amounts[amounts_found]) {\n                                      amounts_found += 1;\n                                      records.push(recordPlaintext);\n                                      // If the user specified a maximum number of microcredits, check if the search has found enough\n                                      if (typeof maxMicrocredits === \"number\") {\n                                        totalRecordValue += recordPlaintext.microcredits();\n                                        // Exit if the search has found the amount specified\n                                        if (totalRecordValue >= BigInt(maxMicrocredits)) {\n                                          return records;\n                                        }\n                                      }\n                                      if (records.length >= amounts.length) {\n                                        return records;\n                                      }\n                                  }\n                                }\n                              }\n                            }\n                          } catch (error) {\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      } catch (error) {\n        // If there is an error fetching blocks, log it and keep searching\n        console.warn(\"Error fetching blocks in range: \" + start.toString() + \"-\" + end.toString());\n        console.warn(\"Error: \", error);\n        failures += 1;\n        if (failures > 10) {\n          console.warn(\"10 failures fetching records reached. Returning records fetched so far\");\n          return records;\n        }\n      }\n    }\n    return records;\n  }\n\n  /**\n   * Returns the contents of the block at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const block = networkClient.getBlock(1234);\n   */\n  async getBlock(height: number): Promise<Block> {\n    try {\n      const block = await this.fetchData<Block>(\"/block/\" + height);\n      return block;\n    } catch (error) {\n      throw new Error(\"Error fetching block.\");\n    }\n  }\n\n  /**\n   * Returns a range of blocks between the specified block heights\n   *\n   * @param {number} start\n   * @param {number} end\n   * @example\n   * const blockRange = networkClient.getBlockRange(2050, 2100);\n   */\n  async getBlockRange(start: number, end: number): Promise<Array<Block>> {\n    try {\n      return await this.fetchData<Array<Block>>(\"/blocks?start=\" + start + \"&end=\" + end);\n    } catch (error) {\n      const errorMessage = `Error fetching blocks between ${start} and ${end}.`;\n      throw new Error(errorMessage);\n    }\n  }\n\n  /**\n   * Returns the deployment transaction id associated with the specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionIDForProgram(program: Program | string): Promise<string> {\n    if (program instanceof Program) {\n      program = program.toString();\n    }\n    try {\n      const id = await this.fetchData<string>(\"/find/transactionID/deployment/\" + program);\n      return id.replace(\"\\\"\", \"\")\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the deployment transaction associated with a specified program\n   *\n   * @param {Program | string} program\n   * @returns {TransactionModel}\n   */\n  async getDeploymentTransactionForProgram(program: Program | string): Promise<TransactionModel> {\n    try {\n      const transaction_id = <string>await this.getDeploymentTransactionIDForProgram(program);\n      return <TransactionModel>await this.getTransaction(transaction_id);\n    } catch (error) {\n      throw new Error(\"Error fetching deployment transaction for program.\");\n    }\n  }\n\n  /**\n   * Returns the contents of the latest block\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestBlock();\n   */\n  async getLatestBlock(): Promise<Block> {\n    try {\n      return await this.fetchData<Block>(\"/latest/block\") as Block;\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest committee\n   *\n   * @returns {Promise<object>} A javascript object containing the latest committee\n   */\n  async getLatestCommittee(): Promise<object> {\n    try {\n      return await this.fetchData<object>(\"/committee/latest\");\n    } catch (error) {\n      throw new Error(\"Error fetching latest block.\");\n    }\n  }\n\n  /**\n   * Returns the latest block height\n   *\n   * @example\n   * const latestHeight = networkClient.getLatestHeight();\n   */\n  async getLatestHeight(): Promise<number> {\n    try {\n      return Number(await this.fetchData<bigint>(\"/latest/height\"));\n    } catch (error) {\n      throw new Error(\"Error fetching latest height.\");\n    }\n  }\n\n  /**\n   * Returns the source code of a program given a program ID\n   *\n   * @param {string} programId The program ID of a program deployed to the Aleo Network\n   * @return {Promise<string>} Source code of the program\n   *\n   * @example\n   * const program = networkClient.getProgram(\"hello_hello.aleo\");\n   * const expectedSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * assert.equal(program, expectedSource);\n   */\n  async getProgram(programId: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId)\n    } catch (error) {\n      throw new Error(\"Error fetching program\");\n    }\n  }\n\n  /**\n   * Returns a program object from a program ID or program source code\n   *\n   * @param {string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @return {Promise<Program>} Source code of the program\n   *\n   * @example\n   * const programID = \"hello_hello.aleo\";\n   * const programSource = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   *\n   * // Get program object from program ID or program source code\n   * const programObjectFromID = await networkClient.getProgramObject(programID);\n   * const programObjectFromSource = await networkClient.getProgramObject(programSource);\n   *\n   * // Both program objects should be equal\n   * assert.equal(programObjectFromID.to_string(), programObjectFromSource.to_string());\n   */\n  async getProgramObject(inputProgram: string): Promise<Program> {\n    try {\n      return Program.fromString(inputProgram);\n    } catch (error) {\n      try {\n        return Program.fromString(<string>(await this.getProgram(inputProgram)));\n      } catch (error) {\n        throw new Error(`${inputProgram} is neither a program name or a valid program`);\n      }\n    }\n  }\n\n  /**\n   *  Returns an object containing the source code of a program and the source code of all programs it imports\n   *\n   * @param {Program | string} inputProgram The program ID or program source code of a program deployed to the Aleo Network\n   * @returns {Promise<ProgramImports>} Object of the form { \"program_id\": \"program_source\", .. } containing program id & source code for all program imports\n   *\n   * @example\n   * const double_test_source = \"import multiply_test.aleo;\\n\\nprogram double_test.aleo;\\n\\nfunction double_it:\\n    input r0 as u32.private;\\n    call multiply_test.aleo/multiply 2u32 r0 into r1;\\n    output r1 as u32.private;\\n\"\n   * const double_test = Program.fromString(double_test_source);\n   * const expectedImports = {\n   *     \"multiply_test.aleo\": \"program multiply_test.aleo;\\n\\nfunction multiply:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    mul r0 r1 into r2;\\n    output r2 as u32.private;\\n\"\n   * }\n   *\n   * // Imports can be fetched using the program ID, source code, or program object\n   * let programImports = await networkClient.getProgramImports(\"double_test.aleo\");\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program source code\n   * programImports = await networkClient.getProgramImports(double_test_source);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   *\n   * // Using the program object\n   * programImports = await networkClient.getProgramImports(double_test);\n   * assert.deepStrictEqual(programImports, expectedImports);\n   */\n  async getProgramImports(inputProgram: Program | string): Promise<ProgramImports> {\n    try {\n      const imports: ProgramImports = {};\n\n      // Get the program object or fail if the program is not valid or does not exist\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n\n      // Get the list of programs that the program imports\n      const importList = program.getImports();\n\n      // Recursively get any imports that the imported programs have in a depth first search order\n      for (let i = 0; i < importList.length; i++) {\n        const import_id = importList[i];\n        if (!imports.hasOwnProperty(import_id)) {\n          const programSource = <string>await this.getProgram(import_id);\n          const nestedImports = <ProgramImports>await this.getProgramImports(import_id);\n          for (const key in nestedImports) {\n            if (!imports.hasOwnProperty(key)) {\n              imports[key] = nestedImports[key];\n            }\n          }\n          imports[import_id] = programSource;\n        }\n      }\n      return imports;\n    } catch (error: any) {\n      logAndThrow(\"Error fetching program imports: \" + error.message);\n    }\n  }\n\n  /**\n   * Get a list of the program names that a program imports\n   *\n   * @param {Program | string} inputProgram - The program id or program source code to get the imports of\n   * @returns {string[]} - The list of program names that the program imports\n   *\n   * @example\n   * const programImportsNames = networkClient.getProgramImports(\"double_test.aleo\");\n   * const expectedImportsNames = [\"multiply_test.aleo\"];\n   * assert.deepStrictEqual(programImportsNames, expectedImportsNames);\n   */\n  async getProgramImportNames(inputProgram: Program | string): Promise<string[]> {\n    try {\n      const program = inputProgram instanceof Program ? inputProgram : <Program>(await this.getProgramObject(inputProgram));\n      return program.getImports();\n    } catch (error: any) {\n      throw new Error(\"Error fetching program imports with error: \" + error.message);\n    }\n  }\n\n  /**\n   * Returns the names of the mappings of a program\n   *\n   * @param {string} programId - The program ID to get the mappings of (e.g. \"credits.aleo\")\n   * @example\n   * const mappings = networkClient.getProgramMappingNames(\"credits.aleo\");\n   * const expectedMappings = [\"account\"];\n   * assert.deepStrictEqual(mappings, expectedMappings);\n   */\n  async getProgramMappingNames(programId: string): Promise<Array<string>> {\n    try {\n      return await this.fetchData<Array<string>>(\"/program/\" + programId + \"/mappings\")\n    } catch (error) {\n      throw new Error(\"Error fetching program mappings - ensure the program exists on chain before trying again\");\n    }\n  }\n\n  /**\n   * Returns the value of a program's mapping for a specific key\n   *\n   * @param {string} programId - The program ID to get the mapping value of (e.g. \"credits.aleo\")\n   * @param {string} mappingName - The name of the mapping to get the value of (e.g. \"account\")\n   * @param {string} key - The key of the mapping to get the value of (e.g. \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\")\n   * @return {Promise<string>} String representation of the value of the mapping\n   *\n   * @example\n   * // Get public balance of an account\n   * const mappingValue = networkClient.getMappingValue(\"credits.aleo\", \"account\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\");\n   * const expectedValue = \"0u64\";\n   * assert.equal(mappingValue, expectedValue);\n   */\n  async getProgramMappingValue(programId: string, mappingName: string, key: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/program/\" + programId + \"/mapping/\" + mappingName + \"/\" + key)\n    } catch (error) {\n      throw new Error(\"Error fetching mapping value - ensure the mapping exists and the key is correct\");\n    }\n  }\n\n  /**\n   * Returns the latest state/merkle root of the Aleo blockchain\n   *\n   * @example\n   * const stateRoot = networkClient.getStateRoot();\n   */\n  async getStateRoot(): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/latest/stateRoot\");\n    } catch (error) {\n      throw new Error(\"Error fetching Aleo state root\");\n    }\n  }\n\n  /**\n   * Returns a transaction by its unique identifier\n   *\n   * @param {string} id\n   * @example\n   * const transaction = networkClient.getTransaction(\"at1handz9xjrqeynjrr0xay4pcsgtnczdksz3e584vfsgaz0dh0lyxq43a4wj\");\n   */\n  async getTransaction(id: string): Promise<TransactionModel> {\n    try {\n    return await this.fetchData<TransactionModel>(\"/transaction/\" + id);\n    } catch (error) {\n      throw new Error(\"Error fetching transaction.\");\n    }\n  }\n\n  /**\n   * Returns the transactions present at the specified block height\n   *\n   * @param {number} height\n   * @example\n   * const transactions = networkClient.getTransactions(654);\n   */\n  async getTransactions(height: number): Promise<Array<TransactionModel>> {\n    try {\n    return await this.fetchData<Array<TransactionModel>>(\"/block/\" + height.toString() + \"/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions.\");\n    }\n  }\n\n  /**\n   * Returns the transactions in the memory pool.\n   *\n   * @example\n   * const transactions = networkClient.getTransactionsInMempool();\n   */\n  async getTransactionsInMempool(): Promise<Array<TransactionModel>> {\n    try {\n      return await this.fetchData<Array<TransactionModel>>(\"/memoryPool/transactions\");\n    } catch (error) {\n      throw new Error(\"Error fetching transactions from mempool.\");\n    }\n  }\n\n  /**\n   * Returns the transition ID of the transition corresponding to the ID of the input or output.\n   * @param {string} inputOrOutputID - ID of the input or output.\n   *\n   * @example\n   * const transitionId = networkClient.getTransitionId(\"2429232855236830926144356377868449890830704336664550203176918782554219952323field\");\n   */\n  async getTransitionId(inputOrOutputID: string): Promise<string> {\n    try {\n      return await this.fetchData<string>(\"/find/transitionID/\" + inputOrOutputID);\n    } catch (error) {\n      throw new Error(\"Error fetching transition ID.\");\n    }\n  }\n\n  /**\n   * Submit an execute or deployment transaction to the Aleo network\n   *\n   * @param {Transaction | string} transaction  - The transaction to submit to the network\n   * @returns {string} - The transaction id of the submitted transaction or the resulting error\n   */\n  async submitTransaction(transaction: Transaction | string): Promise<string> {\n    const transaction_string = transaction instanceof Transaction ? transaction.toString() : transaction;\n    try {\n      const response = await post(this.host + \"/transaction/broadcast\", {\n        body: transaction_string,\n        headers: Object.assign({}, this.headers, {\n          \"Content-Type\": \"application/json\",\n        }),\n      });\n\n      try {\n        const text = await response.text();\n        return parseJSON(text);\n\n      } catch (error: any) {\n        throw new Error(`Error posting transaction. Aleo network response: ${error.message}`);\n      }\n    } catch (error: any) {\n      throw new Error(`Error posting transaction: No response received: ${error.message}`);\n    }\n  }\n}\n\nexport { AleoNetworkClient, AleoNetworkClientOptions, ProgramImports }\n","import {\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    Key,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./browser\";\nimport { get } from \"./utils\";\n\ntype FunctionKeyPair = [ProvingKey, VerifyingKey];\ntype CachedKeyPair = [Uint8Array, Uint8Array];\ntype AleoKeyProviderInitParams = {\n    proverUri?: string;\n    verifierUri?: string;\n    cacheKey?: string;\n};\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface KeySearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * AleoKeyProviderParams search parameter for the AleoKeyProvider. It allows for the specification of a proverUri and\n * verifierUri to fetch keys via HTTP from a remote resource as well as a unique cacheKey to store the keys in memory.\n */\nclass AleoKeyProviderParams implements KeySearchParams {\n    name: string | undefined;\n    proverUri: string | undefined;\n    verifierUri: string | undefined;\n    cacheKey: string | undefined;\n\n    /**\n     * Create a new AleoKeyProviderParams object which implements the KeySearchParams interface. Users can optionally\n     * specify a url for the proverUri & verifierUri to fetch keys via HTTP from a remote resource as well as a unique\n     * cacheKey to store the keys in memory for future use. If no proverUri or verifierUri is specified, a cachekey must\n     * be provided.\n     *\n     * @param { AleoKeyProviderInitParams } params - Optional search parameters\n     */\n    constructor(params: {proverUri?: string, verifierUri?: string, cacheKey?: string, name?: string}) {\n        this.proverUri = params.proverUri;\n        this.verifierUri = params.verifierUri;\n        this.cacheKey = params.cacheKey;\n        this.name = params.name;\n    }\n}\n\n/**\n * KeyProvider interface. Enables the retrieval of public proving and verifying keys for Aleo Programs.\n */\ninterface FunctionKeyProvider {\n    /**\n     * Get bond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_validator function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a search object which implements the KeySearchParams interface\n     * class IndexDbSearch implements KeySearchParams {\n     *     db: string\n     *     keyId: string\n     *     constructor(params: {db: string, keyId: string}) {\n     *         this.db = params.db;\n     *         this.keyId = params.keyId;\n     *     }\n     * }\n     *\n     * // Create a new object which implements the KeyProvider interface\n     * class IndexDbKeyProvider implements FunctionKeyProvider {\n     *     async functionKeys(params: KeySearchParams): Promise<FunctionKeyPair> {\n     *         return new Promise((resolve, reject) => {\n     *             const request = indexedDB.open(params.db, 1);\n     *\n     *             request.onupgradeneeded = function(e) {\n     *                 const db = e.target.result;\n     *                 if (!db.objectStoreNames.contains('keys')) {\n     *                     db.createObjectStore('keys', { keyPath: 'id' });\n     *                 }\n     *             };\n     *\n     *             request.onsuccess = function(e) {\n     *                 const db = e.target.result;\n     *                 const transaction = db.transaction([\"keys\"], \"readonly\");\n     *                 const store = transaction.objectStore(\"keys\");\n     *                 const request = store.get(params.keyId);\n     *                 request.onsuccess = function(e) {\n     *                     if (request.result) {\n     *                         resolve(request.result as FunctionKeyPair);\n     *                     } else {\n     *                         reject(new Error(\"Key not found\"));\n     *                     }\n     *                 };\n     *                 request.onerror = function(e) { reject(new Error(\"Error fetching key\")); };\n     *             };\n     *\n     *             request.onerror = function(e) { reject(new Error(\"Error opening database\")); };\n     *         });\n     *     }\n     *\n     *     // implement the other methods...\n     * }\n     *\n     *\n     * const keyProvider = new AleoKeyProvider();\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const searchParams = new IndexDbSearch({db: \"keys\", keyId: \"credits.aleo:transferPrivate\"});\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(searchParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_private function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get fee_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get join function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get split function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair>;\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair>;\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    unBondPublicKeys(): Promise<FunctionKeyPair>;\n\n}\n\n\n/**\n * AleoKeyProvider class. Implements the KeyProvider interface. Enables the retrieval of Aleo program proving and\n * verifying keys for the credits.aleo program over http from official Aleo sources and storing and retrieving function\n * keys from a local memory cache.\n */\nclass AleoKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n    cacheOption: boolean;\n    keyUris: string;\n\n    async fetchBytes(\n        url = \"/\",\n    ): Promise<Uint8Array> {\n        try {\n        const response = await get(url);\n        const data = await response.arrayBuffer();\n        return new Uint8Array(data);\n        } catch (error: any) {\n            throw new Error(\"Error fetching data.\" + error.message);\n        }\n    }\n\n    constructor() {\n        this.keyUris = KEY_STORE;\n        this.cache = new Map<string, CachedKeyPair>();\n        this.cacheOption = false;\n    }\n\n    /**\n     * Use local memory to store keys\n     *\n     * @param {boolean} useCache whether to store keys in local memory\n     */\n    useCache(useCache: boolean) {\n        this.cacheOption = useCache;\n    }\n\n    /**\n     * Clear the key cache\n     */\n    clearCache() {\n        this.cache.clear();\n    }\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair) {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    }\n\n    /**\n     * Determine if a keyId exists in the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair\n     * @returns {boolean} true if the keyId exists in the cache, false otherwise\n     */\n    containsKeys(keyId: string): boolean {\n        return this.cache.has(keyId)\n    }\n\n    /**\n     * Delete a set of keys from the cache\n     *\n     * @param {string} keyId keyId of a proving and verifying key pair to delete from memory\n     * @returns {boolean} true if the keyId exists in the cache and was deleted, false if the key did not exist\n     */\n    deleteKeys(keyId: string): boolean {\n        return this.cache.delete(keyId)\n    }\n\n    /**\n     * Get a set of keys from the cache\n     * @param keyId keyId of a proving and verifying key pair\n     *\n     * @returns {FunctionKeyPair} Proving and verifying keys for the specified program\n     */\n    getKeys(keyId: string): FunctionKeyPair {\n        console.debug(`Checking if key exists in cache. KeyId: ${keyId}`)\n        if (this.cache.has(keyId)) {\n            const [provingKeyBytes, verifyingKeyBytes] = <CachedKeyPair>this.cache.get(keyId);\n            return [ProvingKey.fromBytes(provingKeyBytes), VerifyingKey.fromBytes(verifyingKeyBytes)];\n        } else {\n            throw new Error(\"Key not found in cache.\");\n        }\n    }\n\n    /**\n     * Get arbitrary function keys from a provider\n     *\n     * @param {KeySearchParams} params parameters for the key search in form of: {proverUri: string, verifierUri: string, cacheKey: string}\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new object which implements the KeyProvider interface\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually using the key provider\n     * const keySearchParams = { \"cacheKey\": \"myProgram:myFunction\" };\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.functionKeys(keySearchParams);\n     */\n    async functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        if (params) {\n            let proverUrl;\n            let verifierUrl;\n            let cacheKey;\n            if (\"name\" in params && typeof params[\"name\"] == \"string\") {\n                let key = CREDITS_PROGRAM_KEYS.getKey(params[\"name\"]);\n                return this.fetchCreditsKeys(key);\n            }\n\n            if (\"proverUri\" in params && typeof params[\"proverUri\"] == \"string\") {\n                proverUrl = params[\"proverUri\"];\n            }\n\n            if (\"verifierUri\" in params && typeof params[\"verifierUri\"] == \"string\") {\n                verifierUrl = params[\"verifierUri\"];\n            }\n\n            if (\"cacheKey\" in params && typeof params[\"cacheKey\"] == \"string\") {\n                cacheKey = params[\"cacheKey\"];\n            }\n\n            if (proverUrl && verifierUrl) {\n                return await this.fetchRemoteKeys(proverUrl, verifierUrl, cacheKey);\n            }\n\n            if (cacheKey) {\n                return this.getKeys(cacheKey);\n            }\n        }\n        throw new Error(\"Invalid parameters provided, must provide either a cacheKey and/or a proverUrl and a verifierUrl\");\n    }\n\n    /**\n     * Returns the proving and verifying keys for a specified program from a specified url.\n     *\n     * @param {string} verifierUrl Url of the proving key\n     * @param {string} proverUrl Url the verifying key\n     * @param {string} cacheKey Key to store the keys in the cache\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * // Create a new AleoKeyProvider object\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPrivateProvingKey, transferPrivateVerifyingKey] = await keyProvider.fetchKeys(\n     *     CREDITS_PROGRAM_KEYS.transfer_private.prover,\n     *     CREDITS_PROGRAM_KEYS.transfer_private.verifier,\n     * );\n     */\n    async fetchRemoteKeys(proverUrl: string, verifierUrl: string, cacheKey?: string): Promise<FunctionKeyPair> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return [ProvingKey.fromBytes(value[0]), VerifyingKey.fromBytes(value[1])];\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                    console.debug(\"Fetching verifying keys \" + verifierUrl);\n                    const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                    this.cache.set(cacheKey, [provingKey.toBytes(), verifyingKey.toBytes()]);\n                    return [provingKey, verifyingKey];\n                }\n            }\n            else {\n                // If cache is disabled, fetch the keys and return them\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl))\n                const verifyingKey = <VerifyingKey>(await this.getVerifyingKey(verifierUrl));\n                return [provingKey, verifyingKey];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving and verifying keys from ${proverUrl} and ${verifierUrl}.`);\n        }\n    }\n\n    /***\n     * Fetches the proving key from a remote source.\n     *\n     * @param proverUrl\n     * @param cacheKey\n     *\n     * @returns {Promise<ProvingKey>} Proving key for the specified program\n     */\n    async fetchProvingKey(proverUrl: string, cacheKey?: string): Promise<ProvingKey> {\n        try {\n            // If cache is enabled, check if the keys have already been fetched and return them if they have\n            if (this.cacheOption) {\n                if (!cacheKey) {\n                    cacheKey = proverUrl;\n                }\n                const value = this.cache.get(cacheKey);\n                if (typeof value !== \"undefined\") {\n                    return ProvingKey.fromBytes(value[0]);\n                } else {\n                    console.debug(\"Fetching proving keys from url \" + proverUrl);\n                    const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                    return provingKey;\n                }\n            }\n            else {\n                const provingKey = <ProvingKey>ProvingKey.fromBytes(await this.fetchBytes(proverUrl));\n                return provingKey;\n            }\n        } catch (error: any) {\n            throw new Error(`Error: ${error.message} fetching fee proving keys from ${proverUrl}`);\n        }\n    }\n\n    async fetchCreditsKeys(key: Key): Promise<FunctionKeyPair> {\n        try {\n            if (!this.cache.has(key.locator) || !this.cacheOption) {\n                const verifying_key = key.verifyingKey()\n                const proving_key = <ProvingKey>await this.fetchProvingKey(key.prover, key.locator);\n                if (this.cacheOption) {\n                    this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [proving_key.toBytes(), verifying_key.toBytes()]);\n                }\n                return [proving_key, verifying_key];\n            } else {\n                const keyPair = <CachedKeyPair>this.cache.get(key.locator);\n                return [ProvingKey.fromBytes(keyPair[0]), VerifyingKey.fromBytes(keyPair[1])];\n            }\n        } catch (error: any) {\n            throw new Error(`Error: fetching credits.aleo keys: ${error.message}`);\n        }\n    }\n\n    async bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_public);\n    }\n\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.bond_validator);\n    }\n\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.claim_unbond_public)\n    }\n\n    /**\n     * Returns the proving and verifying keys for the transfer functions in the credits.aleo program\n     * @param {string} visibility Visibility of the transfer function\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the transfer functions\n     *\n     * @example\n     * // Create a new AleoKeyProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for value transfers\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * // Keys can also be fetched manually\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    async transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private);\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_private_to_public);\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public);\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_as_signer);\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.transfer_public_to_private);\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    }\n\n    /**\n     * Returns the proving and verifying keys for the join function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async joinKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.join);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the split function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the split function\n     * */\n    async splitKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.split);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_private function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePrivateKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_private);\n    }\n\n    /**\n     * Returns the proving and verifying keys for the fee_public function in the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the fee function\n     */\n    async feePublicKeys(): Promise<FunctionKeyPair> {\n        return await this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.fee_public);\n    }\n\n    /**\n     * Gets a verifying key. If the verifying key is for a credits.aleo function, get it from the wasm cache otherwise\n     *\n     * @returns {Promise<VerifyingKey>} Verifying key for the function\n     */\n    // attempt to fetch it from the network\n    async getVerifyingKey(verifierUri: string): Promise<VerifyingKey> {\n        switch (verifierUri) {\n            case CREDITS_PROGRAM_KEYS.bond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.bond_validator.verifier:\n                return CREDITS_PROGRAM_KEYS.bond_validator.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.claim_unbond_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_private.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.fee_public.verifier:\n                return CREDITS_PROGRAM_KEYS.fee_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.inclusion.verifier:\n                return CREDITS_PROGRAM_KEYS.inclusion.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.join.verifier:\n                return CREDITS_PROGRAM_KEYS.join.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.verifier:\n                return CREDITS_PROGRAM_KEYS.set_validator_state.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.split.verifier:\n                return CREDITS_PROGRAM_KEYS.split.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_private_to_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_as_signer.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifier:\n                return CREDITS_PROGRAM_KEYS.transfer_public_to_private.verifyingKey();\n            case CREDITS_PROGRAM_KEYS.unbond_public.verifier:\n                return CREDITS_PROGRAM_KEYS.unbond_public.verifyingKey();\n            default:\n                try {\n                    /// Try to fetch the verifying key from the network as a string\n                    const response = await get(verifierUri);\n                    const text = await response.text();\n                    return <VerifyingKey>VerifyingKey.fromString(text);\n                } catch (e) {\n                    /// If that fails, try to fetch the verifying key from the network as bytes\n                    try {\n                    return <VerifyingKey>VerifyingKey.fromBytes(await this.fetchBytes(verifierUri));\n                    } catch (inner: any) {\n                        throw new Error(\"Invalid verifying key. Error: \" + inner.message);\n                    }\n                }\n        }\n    }\n\n    unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.fetchCreditsKeys(CREDITS_PROGRAM_KEYS.unbond_public);\n    }\n}\n\nexport {AleoKeyProvider, AleoKeyProviderParams, AleoKeyProviderInitParams, CachedKeyPair, FunctionKeyPair, FunctionKeyProvider, KeySearchParams}\n","import {\n    FunctionKeyProvider,\n    KeySearchParams,\n    FunctionKeyPair,\n    CachedKeyPair,\n    ProvingKey,\n    VerifyingKey,\n    CREDITS_PROGRAM_KEYS,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER\n} from \"./browser\";\n\n/**\n * Search parameters for the offline key provider. This class implements the KeySearchParams interface and includes\n * a convenience method for creating a new instance of this class for each function of the credits.aleo program.\n *\n * @example\n * // If storing a key for a custom program function\n * offlineSearchParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n *\n * // If storing a key for a credits.aleo program function\n * bondPublicKeyParams = OfflineSearchParams.bondPublicKeyParams();\n */\nclass OfflineSearchParams implements KeySearchParams {\n    cacheKey: string | undefined;\n    verifyCreditsKeys: boolean | undefined;\n\n    /**\n     * Create a new OfflineSearchParams instance.\n     *\n     * @param {string} cacheKey - Key used to store the local function proving & verifying keys. This should be stored\n     * under the naming convention \"programName/functionName\" (i.e. \"myprogram.aleo/myfunction\")\n     * @param {boolean} verifyCreditsKeys - Whether to verify the keys against the credits.aleo program,\n     * defaults to false, but should be set to true if using keys from the credits.aleo program\n     */\n    constructor(cacheKey: string, verifyCreditsKeys = false) {\n        this.cacheKey = cacheKey;\n        this.verifyCreditsKeys = verifyCreditsKeys;\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_public function of the credits.aleo program.\n     */\n    static bondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the bond_validator function of the credits.aleo program.\n     */\n    static bondValidatorKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.bond_validator.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the claim_unbond_public function of the\n     */\n    static claimUnbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_private function of the credits.aleo program.\n     */\n    static feePrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the fee_public function of the credits.aleo program.\n     */\n    static feePublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.fee_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the inclusion prover function.\n     */\n    static inclusionKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.inclusion.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the join function of the credits.aleo program.\n     */\n    static joinKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.join.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the set_validator_state function of the credits.aleo program.\n     */\n    static setValidatorStateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.set_validator_state.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the split function of the credits.aleo program.\n     */\n    static splitKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.split.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private function of the credits.aleo program.\n     */\n    static transferPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_private_to_public function of the credits.aleo program.\n     */\n    static transferPrivateToPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public function of the credits.aleo program.\n     */\n    static transferPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_as_signer function of the credits.aleo program.\n     */\n    static transferPublicAsSignerKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_as_signer.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the transfer_public_to_private function of the credits.aleo program.\n     */\n    static transferPublicToPrivateKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, true);\n    }\n\n    /**\n     * Create a new OfflineSearchParams instance for the unbond_public function of the credits.aleo program.\n     */\n    static unbondPublicKeyParams(): OfflineSearchParams {\n        return new OfflineSearchParams(CREDITS_PROGRAM_KEYS.unbond_public.locator, true);\n    }\n}\n\n/**\n * A key provider meant for building transactions offline on devices such as hardware wallets. This key provider is not\n * able to contact the internet for key material and instead relies on the user to insert Aleo function proving &\n * verifying keys from local storage prior to usage.\n *\n * @example\n * // Create an offline program manager\n * const programManager = new ProgramManager();\n *\n * // Create a temporary account for the execution of the program\n * const account = new Account();\n * programManager.setAccount(account);\n *\n * // Create the proving keys from the key bytes on the offline machine\n * console.log(\"Creating proving keys from local key files\");\n * const program = \"program hello_hello.aleo; function hello: input r0 as u32.public; input r1 as u32.private; add r0 r1 into r2; output r2 as u32.private;\";\n * const myFunctionProver = await getLocalKey(\"/path/to/my/function/hello_hello.prover\");\n * const myFunctionVerifier = await getLocalKey(\"/path/to/my/function/hello_hello.verifier\");\n * const feePublicProvingKeyBytes = await getLocalKey(\"/path/to/credits.aleo/feePublic.prover\");\n *\n * myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProver);\n * myFunctionVerifyingKey = VerifyingKey.fromBytes(myFunctionVerifier);\n * const feePublicProvingKey = ProvingKey.fromBytes(feePublicKeyBytes);\n *\n * // Create an offline key provider\n * console.log(\"Creating offline key provider\");\n * const offlineKeyProvider = new OfflineKeyProvider();\n *\n * // Cache the keys\n * // Cache the proving and verifying keys for the custom hello function\n * OfflineKeyProvider.cacheKeys(\"hello_hello.aleo/hello\", myFunctionProvingKey, myFunctionVerifyingKey);\n *\n * // Cache the proving key for the fee_public function (the verifying key is automatically cached)\n * OfflineKeyProvider.insertFeePublicKey(feePublicProvingKey);\n *\n * // Create an offline query using the latest state root in order to create the inclusion proof\n * const offlineQuery = new OfflineQuery(\"latestStateRoot\");\n *\n * // Insert the key provider into the program manager\n * programManager.setKeyProvider(offlineKeyProvider);\n *\n * // Create the offline search params\n * const offlineSearchParams = new OfflineSearchParams(\"hello_hello.aleo/hello\");\n *\n * // Create the offline transaction\n * const offlineExecuteTx = <Transaction>await this.buildExecutionTransaction(\"hello_hello.aleo\", \"hello\", 1, false, [\"5u32\", \"5u32\"], undefined, offlineSearchParams, undefined, undefined, undefined, undefined, offlineQuery, program);\n *\n * // Broadcast the transaction later on a machine with internet access\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const txId = await networkClient.broadcastTransaction(offlineExecuteTx);\n */\nclass OfflineKeyProvider implements FunctionKeyProvider {\n    cache: Map<string, CachedKeyPair>;\n\n    constructor() {\n        this.cache = new Map<string, CachedKeyPair>();\n    }\n\n    /**\n     * Get bond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondPublicKeyParams());\n    };\n\n    /**\n     * Get bond_validator function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the bond_public function\n     */\n    bondValidatorKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.bondValidatorKeyParams());\n    };\n\n\n    /**\n     * Cache a set of keys. This will overwrite any existing keys with the same keyId. The user can check if a keyId\n     * exists in the cache using the containsKeys method prior to calling this method if overwriting is not desired.\n     *\n     * @param {string} keyId access key for the cache\n     * @param {FunctionKeyPair} keys keys to cache\n     */\n    cacheKeys(keyId: string, keys: FunctionKeyPair): void {\n        const [provingKey, verifyingKey] = keys;\n        this.cache.set(keyId, [provingKey.toBytes(), verifyingKey.toBytes()]);\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the unbond_public function\n     */\n    claimUnbondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.claimUnbondPublicKeyParams());\n    };\n\n    /**\n     * Get arbitrary function key from the offline key provider cache.\n     *\n     * @param {KeySearchParams | undefined} params - Optional search parameters for the key provider\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified program\n     *\n     * @example\n     * /// First cache the keys from local offline resources\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     * const myFunctionVerifyingKey = VerifyingKey.fromString(\"verifier...\");\n     * const myFunctionProvingKeyBytes = await readBinaryFile('./resources/myfunction.prover');\n     * const myFunctionProvingKey = ProvingKey.fromBytes(myFunctionProvingKeyBytes);\n     *\n     * /// Cache the keys for future use with a memorable locator\n     * offlineKeyProvider.cacheKeys(\"myprogram.aleo/myfunction\", [myFunctionProvingKey, myFunctionVerifyingKey]);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     *\n     * /// First create a search parameter object with the same locator used to cache the keys\n     * const keyParams = new OfflineSearchParams(\"myprogram.aleo/myfunction\");\n     *\n     * /// Then retrieve the keys\n     * const [myFunctionProver, myFunctionVerifier] = await offlineKeyProvider.functionKeys(keyParams);\n     */\n    functionKeys(params?: KeySearchParams): Promise<FunctionKeyPair> {\n        return new Promise((resolve, reject) => {\n            if (params === undefined) {\n                reject(new Error(\"No search parameters provided, cannot retrieve keys\"));\n            } else {\n                const keyId = params.cacheKey;\n                const verifyCreditsKeys = params.verifyCreditsKeys;\n                if (this.cache.has(keyId)) {\n                    const [provingKeyBytes, verifyingKeyBytes] = this.cache.get(keyId) as CachedKeyPair;\n                    const provingKey = ProvingKey.fromBytes(provingKeyBytes);\n                    const verifyingKey = VerifyingKey.fromBytes(verifyingKeyBytes);\n                    if (verifyCreditsKeys) {\n                        const keysMatchExpected = this.verifyCreditsKeys(keyId, provingKey, verifyingKey)\n                        if (!keysMatchExpected) {\n                            reject (new Error(`Cached keys do not match expected keys for ${keyId}`));\n                        }\n                    }\n                    resolve([provingKey, verifyingKey]);\n                } else {\n                    reject(new Error(\"Keys not found in cache for \" + keyId));\n                }\n            }\n        });\n    };\n\n    /**\n     * Determines if the keys for a given credits function match the expected keys.\n     *\n     * @returns {boolean} Whether the keys match the expected keys\n     */\n    verifyCreditsKeys(locator: string, provingKey: ProvingKey, verifyingKey: VerifyingKey): boolean {\n        switch (locator) {\n            case CREDITS_PROGRAM_KEYS.bond_public.locator:\n                return provingKey.isBondPublicProver() && verifyingKey.isBondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.claim_unbond_public.locator:\n                return provingKey.isClaimUnbondPublicProver() && verifyingKey.isClaimUnbondPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_private.locator:\n                return provingKey.isFeePrivateProver() && verifyingKey.isFeePrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.fee_public.locator:\n                return provingKey.isFeePublicProver() && verifyingKey.isFeePublicVerifier();\n            case CREDITS_PROGRAM_KEYS.inclusion.locator:\n                return provingKey.isInclusionProver() && verifyingKey.isInclusionVerifier();\n            case CREDITS_PROGRAM_KEYS.join.locator:\n                return provingKey.isJoinProver() && verifyingKey.isJoinVerifier();\n            case CREDITS_PROGRAM_KEYS.set_validator_state.locator:\n                return provingKey.isSetValidatorStateProver() && verifyingKey.isSetValidatorStateVerifier();\n            case CREDITS_PROGRAM_KEYS.split.locator:\n                return provingKey.isSplitProver() && verifyingKey.isSplitVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private.locator:\n                return provingKey.isTransferPrivateProver() && verifyingKey.isTransferPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator:\n                return provingKey.isTransferPrivateToPublicProver() && verifyingKey.isTransferPrivateToPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public.locator:\n                return provingKey.isTransferPublicProver() && verifyingKey.isTransferPublicVerifier();\n            case CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator:\n                return provingKey.isTransferPublicToPrivateProver() && verifyingKey.isTransferPublicToPrivateVerifier();\n            case CREDITS_PROGRAM_KEYS.unbond_public.locator:\n                return provingKey.isUnbondPublicProver() && verifyingKey.isUnbondPublicVerifier();\n            default:\n                return false;\n        }\n    }\n\n    /**\n     * Get fee_private function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePrivateKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePrivateKeyParams());\n    };\n\n    /**\n     * Get fee_public function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    feePublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.feePublicKeyParams());\n    };\n\n    /**\n     * Get join function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    joinKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.joinKeyParams());\n    };\n\n    /**\n     * Get split function keys from the credits.aleo program. The keys must be cached prior to calling this\n     * method for it to work.\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    splitKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.splitKeyParams());\n    };\n\n    /**\n     * Get keys for a variant of the transfer function from the credits.aleo program.\n     *\n     *\n     * @param {string} visibility Visibility of the transfer function (private, public, privateToPublic, publicToPrivate)\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the specified transfer function\n     *\n     * @example\n     * // Create a new OfflineKeyProvider\n     * const offlineKeyProvider = new OfflineKeyProvider();\n     *\n     * // Cache the keys for future use with the official locator\n     * const transferPublicProvingKeyBytes = await readBinaryFile('./resources/transfer_public.prover.a74565e');\n     * const transferPublicProvingKey = ProvingKey.fromBytes(transferPublicProvingKeyBytes);\n     *\n     * // Cache the transfer_public keys for future use with the OfflinKeyProvider's convenience method for\n     * // transfer_public (the verifying key will be cached automatically)\n     * offlineKeyProvider.insertTransferPublicKeys(transferPublicProvingKey);\n     *\n     * /// When they're needed, retrieve the keys from the cache\n     * const [transferPublicProvingKey, transferPublicVerifyingKey] = await keyProvider.transferKeys(\"public\");\n     */\n    transferKeys(visibility: string): Promise<FunctionKeyPair> {\n        if (PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateKeyParams());\n        } else if (PRIVATE_TO_PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPrivateToPublicKeyParams());\n        } else if (PUBLIC_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicKeyParams());\n        } else if (PUBLIC_TRANSFER_AS_SIGNER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicAsSignerKeyParams());\n        } else if (PUBLIC_TO_PRIVATE_TRANSFER.has(visibility)) {\n            return this.functionKeys(OfflineSearchParams.transferPublicToPrivateKeyParams());\n        } else {\n            throw new Error(\"Invalid visibility type\");\n        }\n    };\n\n    /**\n     * Get unbond_public function keys from the credits.aleo program\n     *\n     * @returns {Promise<FunctionKeyPair>} Proving and verifying keys for the join function\n     */\n    async unBondPublicKeys(): Promise<FunctionKeyPair> {\n        return this.functionKeys(OfflineSearchParams.unbondPublicKeyParams());\n    };\n\n    /**\n     * Insert the proving and verifying keys for the bond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for bond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertBondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isBondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.bond_public.locator, [provingKey.toBytes(), VerifyingKey.bondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for bond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the claim_unbond_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for claim_unbond_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertClaimUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isClaimUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.claim_unbond_public.locator, [provingKey.toBytes(), VerifyingKey.claimUnbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for claim_unbond_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_private.locator, [provingKey.toBytes(), VerifyingKey.feePrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the fee_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for fee_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertFeePublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isFeePublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.fee_public.locator, [provingKey.toBytes(), VerifyingKey.feePublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for fee_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the join function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for join before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertJoinKeys(provingKey: ProvingKey) {\n        if (provingKey.isJoinProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.join.locator, [provingKey.toBytes(), VerifyingKey.joinVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for join\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the set_validator_state function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for set_validator_state before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSetValidatorStateKeys(provingKey: ProvingKey) {\n        if (provingKey.isSetValidatorStateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.set_validator_state.locator, [provingKey.toBytes(), VerifyingKey.setValidatorStateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for set_validator_state\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the split function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for split before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertSplitKeys(provingKey: ProvingKey) {\n        if (provingKey.isSplitProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.split.locator, [provingKey.toBytes(), VerifyingKey.splitVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for split\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_private_to_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_private_to_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPrivateToPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPrivateToPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_private_to_public.locator, [provingKey.toBytes(), VerifyingKey.transferPrivateToPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_private_to_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public.locator, [provingKey.toBytes(), VerifyingKey.transferPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public\");\n        }\n    }\n\n    /**\n     * Insert the proving and verifying keys for the transfer_public_to_private function into the cache. Only the proving key needs\n     * to be inserted, the verifying key is automatically inserted by the SDK. This function will automatically check\n     * that the keys match the expected checksum for transfer_public_to_private before inserting them into the cache.\n     *\n     * @param provingKey\n     */\n    insertTransferPublicToPrivateKeys(provingKey: ProvingKey) {\n        if (provingKey.isTransferPublicToPrivateProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.transfer_public_to_private.locator, [provingKey.toBytes(), VerifyingKey.transferPublicToPrivateVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for transfer_public_to_private\");\n        }\n    }\n\n    insertUnbondPublicKeys(provingKey: ProvingKey) {\n        if (provingKey.isUnbondPublicProver()) {\n            this.cache.set(CREDITS_PROGRAM_KEYS.unbond_public.locator, [provingKey.toBytes(), VerifyingKey.unbondPublicVerifier().toBytes()]);\n        } else {\n            throw new Error(\"Attempted to insert invalid proving keys for unbond_public\");\n        }\n    }\n}\n\n\nexport {OfflineKeyProvider, OfflineSearchParams}\n","import { logAndThrow, RecordPlaintext } from \"./browser\";\nimport { Account } from \"./account\";\nimport { AleoNetworkClient } from \"./network-client\";\n\n/**\n * Interface for record search parameters. This allows for arbitrary search parameters to be passed to record provider\n * implementations.\n */\ninterface RecordSearchParams {\n    [key: string]: any; // This allows for arbitrary keys with any type values\n}\n\n/**\n * Interface for a record provider. A record provider is used to find records for use in deployment and execution\n * transactions on the Aleo Network. A default implementation is provided by the NetworkRecordProvider class. However,\n * a custom implementation can be provided (say if records are synced locally to a database from the network) by\n * implementing this interface.\n */\ninterface RecordProvider {\n    account: Account\n\n    /**\n     * Find a credits.aleo record with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, its nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const record2 = await recordProvider.findCreditsRecord(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecord(microcredits: number, unspent: boolean,  nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find a list of credit.aleo records with a given number of microcredits from the chosen provider\n     *\n     * @param {number} microcreditAmounts A list of separate microcredit amounts to search for (e.g. [5000, 100000])\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext[]>} A list of records with a value greater or equal to the amounts specified if such records exist, otherwise an error\n     *\n     * @example\n     * // A class implementing record provider can be used to find a record with a given number of microcredits\n     * const records = await recordProvider.findCreditsRecords([5000, 5000], true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces array so that it is not\n     * // found again if a subsequent search is performed\n     * const nonces = [];\n     * records.forEach(record => { nonces.push(record.nonce()) });\n     * const records2 = await recordProvider.findCreditsRecord(5000, true, nonces);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    findCreditsRecords(microcreditAmounts: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n\n    /**\n     * Find an arbitrary record\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     program: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.program = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, \"credits.aleo\", \"credits\");\n     *\n     * const record = await recordProvider.findRecord(true, [], params);\n     */\n    findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext>;\n\n    /**\n     * Find multiple records from arbitrary programs\n     *\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * // The RecordSearchParams interface can be used to create parameters for custom record searches which can then\n     * // be passed to the record provider. An example of how this would be done for the credits.aleo program is shown\n     * // below.\n     *\n     * class CustomRecordSearch implements RecordSearchParams {\n     *     startHeight: number;\n     *     endHeight: number;\n     *     amount: number;\n     *     maxRecords: number;\n     *     programName: string;\n     *     recordName: string;\n     *     constructor(startHeight: number, endHeight: number, credits: number, maxRecords: number, programName: string, recordName: string) {\n     *         this.startHeight = startHeight;\n     *         this.endHeight = endHeight;\n     *         this.amount = amount;\n     *         this.maxRecords = maxRecords;\n     *         this.programName = programName;\n     *         this.recordName = recordName;\n     *     }\n     * }\n     *\n     * const params = new CustomRecordSearch(0, 100, 5000, 2, \"credits.aleo\", \"credits\");\n     * const records = await recordProvider.findRecord(true, [], params);\n     */\n    findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]>;\n}\n\n/**\n * A record provider implementation that uses the official Aleo API to find records for usage in program execution and\n * deployment, wallet functionality, and other use cases.\n */\nclass NetworkRecordProvider implements RecordProvider {\n    account: Account;\n    networkClient: AleoNetworkClient;\n    constructor(account: Account, networkClient: AleoNetworkClient) {\n        this.account = account;\n        this.networkClient = networkClient;\n    }\n\n    /**\n     * Set the account used to search for records\n     *\n     * @param {Account} account The account to use for searching for records\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Find a list of credit records with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number[]} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     *\n     * */\n    async findCreditsRecords(microcredits: number[], unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        let startHeight = 0;\n        let endHeight = 0;\n\n        if (searchParameters) {\n            if (\"startHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                startHeight = searchParameters[\"startHeight\"];\n            }\n\n            if (\"endHeight\" in searchParameters && typeof searchParameters[\"endHeight\"] == \"number\") {\n                endHeight = searchParameters[\"endHeight\"];\n            }\n        }\n\n        // If the end height is not specified, use the current block height\n        if (endHeight == 0) {\n            const end = await this.networkClient.getLatestHeight();\n            endHeight = end;\n        }\n\n        // If the start height is greater than the end height, throw an error\n        if (startHeight >= endHeight) {\n            logAndThrow(\"Start height must be less than end height\");\n        }\n\n        return await this.networkClient.findUnspentRecords(startHeight, endHeight, this.account.privateKey(), microcredits, undefined, nonces);\n    }\n\n    /**\n     * Find a credit record with a given number of microcredits by via the official Aleo API\n     *\n     * @param {number} microcredits The number of microcredits to search for\n     * @param {boolean} unspent Whether or not the record is unspent\n     * @param {string[]} nonces Nonces of records already found so that they are not found again\n     * @param {RecordSearchParams} searchParameters Additional parameters to search for\n     * @returns {Promise<RecordPlaintext>} The record if found, otherwise an error\n     *\n     * @example\n     * // Create a new NetworkRecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // The record provider can be used to find records with a given number of microcredits\n     * const record = await recordProvider.findCreditsRecord(5000, true, []);\n     *\n     * // When a record is found but not yet used, it's nonce should be added to the nonces parameter so that it is not\n     * // found again if a subsequent search is performed\n     * const records = await recordProvider.findCreditsRecords(5000, true, [record.nonce()]);\n     *\n     * // When the program manager is initialized with the record provider it will be used to find automatically find\n     * // fee records and amount records for value transfers so that they do not need to be specified manually\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * programManager.transfer(1, \"aleo166q6ww6688cug7qxwe7nhctjpymydwzy2h7rscfmatqmfwnjvggqcad0at\", \"public\", 0.5);\n     */\n    async findCreditsRecord(microcredits: number, unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        let records = null;\n\n        try {\n            records = await this.findCreditsRecords([microcredits], unspent, nonces, searchParameters);\n        } catch (e) {}\n\n        if (records && records.length > 0) {\n            return records[0];\n        }\n\n        console.error(\"Record not found with error:\", records);\n        throw new Error(\"Record not found\");\n    }\n\n    /**\n     * Find an arbitrary record. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecord(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Find multiple arbitrary records. WARNING: This function is not implemented yet and will throw an error.\n     */\n    async findRecords(unspent: boolean, nonces?: string[], searchParameters?: RecordSearchParams): Promise<RecordPlaintext[]> {\n        throw new Error(\"Method not implemented.\");\n    }\n\n}\n\n/**\n * BlockHeightSearch is a RecordSearchParams implementation that allows for searching for records within a given\n * block height range.\n *\n * @example\n * // Create a new BlockHeightSearch\n * const params = new BlockHeightSearch(89995, 99995);\n *\n * // Create a new NetworkRecordProvider\n * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n * const keyProvider = new AleoKeyProvider();\n * const recordProvider = new NetworkRecordProvider(account, networkClient);\n *\n * // The record provider can be used to find records with a given number of microcredits and the block height search\n * // can be used to find records within a given block height range\n * const record = await recordProvider.findCreditsRecord(5000, true, [], params);\n *\n */\nclass BlockHeightSearch implements RecordSearchParams {\n    startHeight: number;\n    endHeight: number;\n    constructor(startHeight: number, endHeight: number) {\n        this.startHeight = startHeight;\n        this.endHeight = endHeight;\n    }\n}\n\nexport { BlockHeightSearch, NetworkRecordProvider, RecordProvider, RecordSearchParams};\n","// Experimental example where SDK manages worker\n\nimport { wrap } from \"comlink\";\nimport { WorkerAPI } from './worker';\n\nlet singletonWorker: WorkerAPI | null = null;\n\nconst createAleoWorker = (): WorkerAPI => {\n    if (!singletonWorker) {\n        const worker = new Worker(new URL(\"worker.js\", import.meta.url), {\n            type: \"module\",\n        });\n        singletonWorker = wrap<WorkerAPI>(worker);\n    }\n    return singletonWorker;\n};\n\nexport { createAleoWorker };","import {\n    Account,\n    AleoKeyProvider,\n    AleoNetworkClient,\n    ExecutionResponse,\n    FunctionExecution,\n    FunctionKeyProvider,\n    FunctionKeyPair,\n    OfflineQuery,\n    KeySearchParams,\n    RecordPlaintext,\n    RecordProvider,\n    RecordSearchParams,\n    PrivateKey,\n    Program,\n    ProgramImports,\n    ProvingKey,\n    VerifyingKey,\n    Transaction,\n    PRIVATE_TRANSFER_TYPES,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n    ProgramManagerBase as WasmProgramManager, verifyFunctionExecution, AleoKeyProviderParams, CREDITS_PROGRAM_KEYS,\n} from \"./browser\";\n\n/**\n * Represents the options for executing a transaction in the Aleo network.\n * This interface is used to specify the parameters required for building and submitting an execution transaction.\n *\n * @property {string} programName - The name of the program containing the function to be executed.\n * @property {string} functionName - The name of the function to execute within the program.\n * @property {number} fee - The fee to be paid for the transaction.\n * @property {boolean} privateFee - If true, uses a private record to pay the fee; otherwise, uses the account's public credit balance.\n * @property {string[]} inputs - The inputs to the function being executed.\n * @property {RecordSearchParams} [recordSearchParams] - Optional parameters for searching for a record to pay the execution transaction fee.\n * @property {KeySearchParams} [keySearchParams] - Optional parameters for finding the matching proving & verifying keys for the function.\n * @property {string | RecordPlaintext} [feeRecord] - Optional fee record to use for the transaction.\n * @property {ProvingKey} [provingKey] - Optional proving key to use for the transaction.\n * @property {VerifyingKey} [verifyingKey] - Optional verifying key to use for the transaction.\n * @property {PrivateKey} [privateKey] - Optional private key to use for the transaction.\n * @property {OfflineQuery} [offlineQuery] - Optional offline query if creating transactions in an offline environment.\n * @property {string | Program} [program] - Optional program source code to use for the transaction.\n * @property {ProgramImports} [imports] - Optional programs that the program being executed imports.\n */\ninterface ExecuteOptions {\n    programName: string;\n    functionName: string;\n    fee: number;\n    privateFee: boolean;\n    inputs: string[];\n    recordSearchParams?: RecordSearchParams;\n    keySearchParams?: KeySearchParams;\n    feeRecord?: string | RecordPlaintext;\n    provingKey?: ProvingKey;\n    verifyingKey?: VerifyingKey;\n    privateKey?: PrivateKey;\n    offlineQuery?: OfflineQuery;\n    program?: string | Program;\n    imports?: ProgramImports;\n}\n\n/**\n * The ProgramManager class is used to execute and deploy programs on the Aleo network and create value transfers.\n */\nclass ProgramManager {\n    account: Account | undefined;\n    keyProvider: FunctionKeyProvider;\n    host: string;\n    networkClient: AleoNetworkClient;\n    recordProvider: RecordProvider | undefined;\n\n    /** Create a new instance of the ProgramManager\n     *\n     * @param { string | undefined } host A host uri running the official Aleo API\n     * @param { FunctionKeyProvider | undefined } keyProvider A key provider that implements {@link FunctionKeyProvider} interface\n     * @param { RecordProvider | undefined } recordProvider A record provider that implements {@link RecordProvider} interface\n     */\n    constructor(host?: string | undefined, keyProvider?: FunctionKeyProvider | undefined, recordProvider?: RecordProvider | undefined) {\n        this.host = host ? host : 'https://api.explorer.provable.com/v1';\n        this.networkClient = new AleoNetworkClient(this.host);\n\n        this.keyProvider = keyProvider ? keyProvider : new AleoKeyProvider();\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Set the account to use for transaction submission to the Aleo network\n     *\n     * @param {Account} account Account to use for transaction submission\n     */\n    setAccount(account: Account) {\n        this.account = account;\n    }\n\n    /**\n     * Set the key provider that provides the proving and verifying keys for programs\n     *\n     * @param {FunctionKeyProvider} keyProvider\n     */\n    setKeyProvider(keyProvider: FunctionKeyProvider) {\n        this.keyProvider = keyProvider;\n    }\n\n    /**\n     * Set the host peer to use for transaction submission to the Aleo network\n     *\n     * @param host {string} Peer url to use for transaction submission\n     */\n    setHost(host: string) {\n        this.host = host;\n        this.networkClient.setHost(host);\n    }\n\n    /**\n     * Set the record provider that provides records for transactions\n     *\n     * @param {RecordProvider} recordProvider\n     */\n    setRecordProvider(recordProvider: RecordProvider) {\n        this.recordProvider = recordProvider;\n    }\n\n    /**\n     * Deploy an Aleo program to the Aleo network\n     *\n     * @param {string} program Program source code\n     * @param {number} fee Fee to pay for the transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for searching for a record to use\n     * pay the deployment fee\n     * @param {string | RecordPlaintext | undefined} feeRecord Optional Fee record to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @returns {string} The transaction id of the deployed program or a failure message from the network\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for deployments\n     * const program = \"program hello_hello.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Define a fee in credits\n     * const fee = 1.2;\n     *\n     * // Deploy the program\n     * const tx_id = await programManager.deploy(program, fee);\n     *\n     * // Verify the transaction was successful\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async deploy(\n        program: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        feeRecord?: string | RecordPlaintext,\n        privateKey?: PrivateKey,\n    ): Promise<string> {\n        // Ensure the program is valid and does not exist on the network\n        try {\n            const programObject = Program.fromString(program);\n            let programSource;\n            try {\n                programSource = await this.networkClient.getProgram(programObject.id());\n            } catch (e) {\n                // Program does not exist on the network, deployment can proceed\n                console.log(`Program ${programObject.id()} does not exist on the network, deploying...`);\n            }\n            if (typeof programSource == \"string\") {\n                throw (`Program ${programObject.id()} already exists on the network, please rename your program`);\n            }\n        } catch (e: any) {\n            logAndThrow(`Error validating program: ${e.message}`);\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let deploymentPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            deploymentPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof deploymentPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // Resolve the program imports if they exist\n        let imports;\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n        } catch (e: any) {\n            logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n        }\n\n        // Build a deployment transaction and submit it to the network\n        const tx = await WasmProgramManager.buildDeploymentTransaction(deploymentPrivateKey, program, fee, feeRecord, this.host, imports, feeProvingKey, feeVerifyingKey);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.buildExecutionTransaction({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async buildExecutionTransaction(options: ExecuteOptions): Promise<Transaction> {\n        // Destructure the options object to access the parameters\n        const {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            recordSearchParams,\n            keySearchParams,\n            privateKey,\n            offlineQuery\n        } = options;\n\n        let feeRecord = options.feeRecord;\n        let provingKey = options.provingKey;\n        let verifyingKey = options.verifyingKey;\n        let program = options.program;\n        let imports = options.imports;\n\n        // Ensure the function exists on the network\n        if (program === undefined) {\n            try {\n                program = <string>(await this.networkClient.getProgram(programName));\n            } catch (e: any) {\n                logAndThrow(`Error finding ${programName}. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network the program is deployed to the network.`);\n            }\n        } else if (program instanceof Program) {\n            program = program.toString();\n        }\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Get the fee proving and verifying keys from the key provider\n        let feeKeys;\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Resolve the program imports if they exist\n        const numberOfImports = Program.fromString(program).getImports().length;\n        if (numberOfImports > 0 && !imports) {\n            try {\n                imports = <ProgramImports>await this.networkClient.getProgramImports(programName);\n            } catch (e: any) {\n                logAndThrow(`Error finding program imports. Network response: '${e.message}'. Please ensure you're connected to a valid Aleo network and the program is deployed to the network.`);\n            }\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildExecutionTransaction(executionPrivateKey, program, functionName, inputs, fee, feeRecord, this.host, imports, provingKey, verifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Builds an execution transaction for submission to the Aleo network.\n     *\n     * @param {ExecuteOptions} options - The options for the execution transaction.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error.\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider using official Aleo record, key, and network providers\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     *\n     * // Build and execute the transaction\n     * const transaction = await programManager.execute({\n     *   programName: \"hello_hello.aleo\",\n     *   functionName: \"hello_hello\",\n     *   fee: 0.020,\n     *   privateFee: false,\n     *   inputs: [\"5u32\", \"5u32\"],\n     *   keySearchParams: { \"cacheKey\": \"hello_hello:hello\" }\n     * });\n     * const result = await programManager.networkClient.submitTransaction(transaction);\n     */\n    async execute(options: ExecuteOptions): Promise<string> {\n        const tx = <Transaction>await this.buildExecutionTransaction(options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Run an Aleo program in offline mode\n     *\n     * @param {string} program Program source code containing the function to be executed\n     * @param {string} function_name Function name to execute\n     * @param {string[]} inputs Inputs to the function\n     * @param {number} proveExecution Whether to prove the execution of the function and return an execution transcript\n     * that contains the proof.\n     * @param {string[] | undefined} imports Optional imports to the program\n     * @param {KeySearchParams | undefined} keySearchParams Optional parameters for finding the matching proving &\n     * verifying keys for the function\n     * @param {ProvingKey | undefined} provingKey Optional proving key to use for the transaction\n     * @param {VerifyingKey | undefined} verifyingKey Optional verifying key to use for the transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * import { Account, Program } from '@provablehq/sdk';\n     *\n     * /// Create the source for the \"helloworld\" program\n     * const program = \"program helloworld.aleo;\\n\\nfunction hello:\\n    input r0 as u32.public;\\n    input r1 as u32.private;\\n    add r0 r1 into r2;\\n    output r2 as u32.private;\\n\";\n     * const programManager = new ProgramManager();\n     *\n     * /// Create a temporary account for the execution of the program\n     * const account = new Account();\n     * programManager.setAccount(account);\n     *\n     * /// Get the response and ensure that the program executed correctly\n     * const executionResponse = await programManager.run(program, \"hello\", [\"5u32\", \"5u32\"]);\n     * const result = executionResponse.getOutputs();\n     * assert(result === [\"10u32\"]);\n     */\n    async run(\n        program: string,\n        function_name: string,\n        inputs: string[],\n        proveExecution: boolean,\n        imports?: ProgramImports,\n        keySearchParams?: KeySearchParams,\n        provingKey?: ProvingKey,\n        verifyingKey?: VerifyingKey,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<ExecutionResponse> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // If the function proving and verifying keys are not provided, attempt to find them using the key provider\n        if (!provingKey || !verifyingKey) {\n            try {\n                [provingKey, verifyingKey] = <FunctionKeyPair>await this.keyProvider.functionKeys(keySearchParams);\n            } catch (e) {\n                console.log(`Function keys not found. Key finder response: '${e}'. The function keys will be synthesized`)\n            }\n        }\n\n        // Run the program offline and return the result\n        console.log(\"Running program offline\")\n        console.log(\"Proving key: \", provingKey);\n        console.log(\"Verifying key: \", verifyingKey);\n        return WasmProgramManager.executeFunctionOffline(executionPrivateKey, program, function_name, inputs, proveExecution, false, imports, provingKey, verifyingKey, this.host, offlineQuery);\n    }\n\n    /**\n     * Join two credits records into a single credits record\n     *\n     * @param {RecordPlaintext | string} recordOne First credits record to join\n     * @param {RecordPlaintext | string} recordTwo Second credits record to join\n     * @param {number} fee Fee in credits pay for the join transaction\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the fee record to use\n     * to pay the fee for the join transaction\n     * @param {RecordPlaintext | string | undefined} feeRecord Fee record to use for the join transaction\n     * @param {PrivateKey | undefined} privateKey Private key to use for the join transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     */\n    async join(\n        recordOne: RecordPlaintext | string,\n        recordTwo: RecordPlaintext | string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams | undefined,\n        feeRecord?: RecordPlaintext | string | undefined,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery,\n    ): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof privateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let joinKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            joinKeys = <FunctionKeyPair>await this.keyProvider.joinKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [joinProvingKey, joinVerifyingKey] = joinKeys;\n\n        // Get the fee record from the account if it is not provided in the parameters\n        try {\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, [], feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Validate the records provided are valid plaintext records\n        try {\n            recordOne = recordOne instanceof RecordPlaintext ? recordOne : RecordPlaintext.fromString(recordOne);\n            recordTwo = recordTwo instanceof RecordPlaintext ? recordTwo : RecordPlaintext.fromString(recordTwo);\n        } catch (e: any) {\n            logAndThrow('Records provided are not valid. Please ensure they are valid plaintext records.')\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildJoinTransaction(executionPrivateKey, recordOne, recordTwo, fee, feeRecord, this.host, joinProvingKey, joinVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Split credits into two new credits records\n     *\n     * @param {number} splitAmount Amount in microcredits to split from the original credits record\n     * @param {RecordPlaintext | string} amountRecord Amount record to use for the split transaction\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the split transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>}\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * const record = \"{  owner: aleo184vuwr5u7u0ha5f5k44067dd2uaqewxx6pe5ltha5pv99wvhfqxqv339h4.private,  microcredits: 45000000u64.private,  _nonce: 4106205762862305308495708971985748592380064201230396559307556388725936304984group.public}\"\n     * const tx_id = await programManager.split(25000000, record);\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async split(splitAmount: number, amountRecord: RecordPlaintext | string, privateKey?: PrivateKey, offlineQuery?: OfflineQuery): Promise<string> {\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the split keys from the key provider\n        let splitKeys;\n        try {\n            splitKeys = <FunctionKeyPair>await this.keyProvider.splitKeys();\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [splitProvingKey, splitVerifyingKey] = splitKeys;\n\n        // Validate the record to be split\n        try {\n            amountRecord = amountRecord instanceof RecordPlaintext ? amountRecord : RecordPlaintext.fromString(amountRecord);\n        } catch (e: any) {\n            logAndThrow(\"Record provided is not valid. Please ensure it is a valid plaintext record.\");\n        }\n\n        // Build an execution transaction and submit it to the network\n        const tx = await WasmProgramManager.buildSplitTransaction(executionPrivateKey, splitAmount, amountRecord, this.host, splitProvingKey, splitVerifyingKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Pre-synthesize proving and verifying keys for a program\n     *\n     * @param program {string} The program source code to synthesize keys for\n     * @param function_id {string} The function id to synthesize keys for\n     * @param inputs {Array<string>}  Sample inputs to the function\n     * @param privateKey {PrivateKey | undefined} Optional private key to use for the key synthesis\n     *\n     * @returns {Promise<FunctionKeyPair>}\n     */\n    async synthesizeKeys(\n        program: string,\n        function_id: string,\n        inputs: Array<string>,\n        privateKey?: PrivateKey,\n    ): Promise<FunctionKeyPair> {\n        // Resolve the program imports if they exist\n        let imports;\n\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\") {\n            if (typeof this.account !== \"undefined\") {\n                executionPrivateKey = this.account.privateKey();\n            } else {\n                executionPrivateKey = new PrivateKey();\n            }\n        }\n\n        // Attempt to run an offline execution of the program and extract the proving and verifying keys\n        try {\n            imports = await this.networkClient.getProgramImports(program);\n            const keyPair = await WasmProgramManager.synthesizeKeyPair(\n                executionPrivateKey,\n                program,\n                function_id,\n                inputs,\n                imports\n            );\n            return [<ProvingKey>keyPair.provingKey(), <VerifyingKey>keyPair.verifyingKey()];\n        } catch (e: any) {\n            logAndThrow(`Could not synthesize keys - error ${e.message}. Please ensure the program is valid and the inputs are correct.`);\n        }\n    }\n\n    /**\n     * Build a transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programName = \"hello_hello.aleo\";\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async buildTransferTransaction(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        // Validate the transfer type\n        transferType = <string>validateTransferType(transferType);\n\n        // Get the private key from the account if it is not provided in the parameters\n        let executionPrivateKey = privateKey;\n        if (typeof executionPrivateKey === \"undefined\" && typeof this.account !== \"undefined\") {\n            executionPrivateKey = this.account.privateKey();\n        }\n\n        if (typeof executionPrivateKey === \"undefined\") {\n            throw(\"No private key provided and no private key set in the ProgramManager\");\n        }\n\n        // Get the proving and verifying keys from the key provider\n        let feeKeys;\n        let transferKeys\n        try {\n            feeKeys = privateFee ? <FunctionKeyPair>await this.keyProvider.feePrivateKeys() : <FunctionKeyPair>await this.keyProvider.feePublicKeys();\n            transferKeys = <FunctionKeyPair>await this.keyProvider.transferKeys(transferType);\n        } catch (e: any) {\n            logAndThrow(`Error finding fee keys. Key finder response: '${e.message}'. Please ensure your key provider is configured correctly.`);\n        }\n        const [feeProvingKey, feeVerifyingKey] = feeKeys;\n        const [transferProvingKey, transferVerifyingKey] = transferKeys;\n\n        // Get the amount and fee record from the account if it is not provided in the parameters\n        try {\n            // Track the nonces of the records found so no duplicate records are used\n            const nonces: string[] = [];\n            if (requiresAmountRecord(transferType)) {\n                // If the transfer type is private and requires an amount record, get it from the record provider\n                amountRecord = <RecordPlaintext>await this.getCreditsRecord(fee, [], amountRecord, recordSearchParams);\n                nonces.push(amountRecord.nonce());\n            } else {\n                amountRecord = undefined;\n            }\n            feeRecord = privateFee ? <RecordPlaintext>await this.getCreditsRecord(fee, nonces, feeRecord, recordSearchParams) : undefined;\n        } catch (e: any) {\n            logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n        }\n\n        // Build an execution transaction and submit it to the network\n        return await WasmProgramManager.buildTransferTransaction(executionPrivateKey, amount, recipient, transferType, amountRecord, fee, feeRecord, this.host, transferProvingKey, transferVerifyingKey, feeProvingKey, feeVerifyingKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Build a transfer_public_as_signer transaction to transfer credits to another account for later submission to the Aleo network\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     */\n    async buildTransferPublicAsSignerTransaction(\n        amount: number,\n        recipient: string,\n        fee: number,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<Transaction> {\n        return this.buildTransferTransaction(amount, recipient, \"public\", fee, false, undefined, undefined, undefined, privateKey, offlineQuery);\n    }\n\n    /**\n     * Transfer credits to another account\n     *\n     * @param {number} amount The amount of credits to transfer\n     * @param {string} recipient The recipient of the transfer\n     * @param {string} transferType The type of transfer to perform - options: 'private', 'privateToPublic', 'public', 'publicToPrivate'\n     * @param {number} fee The fee to pay for the transfer\n     * @param {boolean} privateFee Use a private record to pay the fee. If false this will use the account's public credit balance\n     * @param {RecordSearchParams | undefined} recordSearchParams Optional parameters for finding the amount and fee\n     * records for the transfer transaction\n     * @param {RecordPlaintext | string} amountRecord Optional amount record to use for the transfer\n     * @param {RecordPlaintext | string} feeRecord Optional fee record to use for the transfer\n     * @param {PrivateKey | undefined} privateKey Optional private key to use for the transfer transaction\n     * @param {OfflineQuery | undefined} offlineQuery Optional offline query if creating transactions in an offline environment\n     * @returns {Promise<string>} The transaction id of the transfer transaction\n     *\n     * @example\n     * // Create a new NetworkClient, KeyProvider, and RecordProvider\n     * const networkClient = new AleoNetworkClient(\"https://api.explorer.provable.com/v1\");\n     * const keyProvider = new AleoKeyProvider();\n     * const recordProvider = new NetworkRecordProvider(account, networkClient);\n     *\n     * // Initialize a program manager with the key provider to automatically fetch keys for executions\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, recordProvider);\n     * await programManager.initialize();\n     * const tx_id = await programManager.transfer(1, \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"private\", 0.2)\n     * const transaction = await programManager.networkClient.getTransaction(tx_id);\n     */\n    async transfer(\n        amount: number,\n        recipient: string,\n        transferType: string,\n        fee: number,\n        privateFee: boolean,\n        recordSearchParams?: RecordSearchParams,\n        amountRecord?: RecordPlaintext | string,\n        feeRecord?: RecordPlaintext | string,\n        privateKey?: PrivateKey,\n        offlineQuery?: OfflineQuery\n    ): Promise<string> {\n        const tx = <Transaction>await this.buildTransferTransaction(amount, recipient, transferType, fee, privateFee, recordSearchParams, amountRecord, feeRecord, privateKey, offlineQuery);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build transaction to bond credits to a validator for later submission to the Aleo Network\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction object for later submission\n     * const tx = await programManager.buildBondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be later submitted to the network using the network client.\n     * const result = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondPublicTransaction(staker_address: string, validator_address: string, withdrawal_address: string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_public\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [staker_address, validator_address, withdrawal_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_public.verifier,\n                cacheKey: \"credits.aleo/bond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Bond credits to validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", \"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is bonding the credits\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the signer (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 1,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {Options} options Options for the execution\n     */\n    async bondPublic(staker_address: string, validator_address: string, withdrawal_address:string, amount: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondPublicTransaction(staker_address, validator_address, withdrawal_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a bond_validator transaction for later submission to the Aleo Network.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bond validator transaction object for later use.\n     * const tx = await programManager.buildBondValidatorTransaction(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can later be submitted to the network using the network client.\n     * const tx_id = await programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async buildBondValidatorTransaction(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const adjustedCommission = Math.trunc(commission)\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"bond_validator\",\n            fee = options.fee || 0.86,\n            privateFee = false,\n            inputs = [validator_address, withdrawal_address, `${scaledAmount.toString()}u64`, `${adjustedCommission.toString()}u8`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.bond_validator.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.bond_validator.verifier,\n                cacheKey: \"credits.aleo/bond_validator\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Build transaction to bond a validator.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.bondValidator(\"aleo1rhgdu77hgyqd3xjj8ucu3jj9r2krwz6mnzyd80gncr5fxcwlh5rsvzp9px\", \"aleo1feya8sjy9k2zflvl2dx39pdsq5tju28elnp2ektnn588uu9ghv8s84msv9\", 2000000);\n     *\n     * @returns string\n     * @param {string} validator_address Address of the validator to bond to, if this address is the same as the staker (i.e. the\n     * executor of this function), it will attempt to bond the credits as a validator. Bonding as a validator currently\n     * requires a minimum of 10,000,000 credits to bond (subject to change). If the address is specified is an existing\n     * validator and is different from the address of the executor of this function, it will bond the credits to that\n     * validator's staking committee as a delegator. A minimum of 10 credits is required to bond as a delegator.\n     * @param {string} withdrawal_address Address to withdraw the staked credits to when unbond_public is called.\n     * @param {number} amount The amount of credits to bond\n     * @param {number} commission The commission rate for the validator (must be between 0 and 100 - an error will be thrown if it is not)\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     */\n    async bondValidator(validator_address: string, withdrawal_address: string, amount: number, commission: number, options: Partial<ExecuteOptions> = {}) {\n        const tx = <Transaction>await this.buildBondValidatorTransaction(validator_address, withdrawal_address, amount, commission, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to unbond public credits from a validator in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is unbonding the credits.\n     * @param {number} amount - The amount of credits to unbond (scaled by 1,000,000).\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management.\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to unbond credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * const tx = await programManager.buildUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 2000000);\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildUnbondPublicTransaction(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const scaledAmount = Math.trunc(amount * 1000000);\n\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"unbond_public\",\n            fee = options.fee || 1.3,\n            privateFee = false,\n            inputs = [staker_address, `${scaledAmount.toString()}u64`],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.unbond_public.verifier,\n                cacheKey: \"credits.aleo/unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Unbond a specified amount of staked credits.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction and send it to the network\n     * const tx_id = await programManager.unbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\", 10);\n     *\n     * @returns string\n     * @param {string} staker_address Address of the staker who is unbonding the credits\n     * @param {number} amount Amount of credits to unbond. If the address of the executor of this function is an\n     * existing validator, it will subtract this amount of credits from the validator's staked credits. If there are\n     * less than 1,000,000 credits staked pool after the unbond, the validator will be removed from the validator set.\n     * If the address of the executor of this function is not a validator and has credits bonded as a delegator, it will\n     * subtract this amount of credits from the delegator's staked credits. If there are less than 10 credits bonded\n     * after the unbond operation, the delegator will be removed from the validator's staking pool.\n     * @param {ExecuteOptions} options Options for the execution\n     */\n    async unbondPublic(staker_address: string, amount: number, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildUnbondPublicTransaction(staker_address, amount, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a transaction to claim unbonded public credits in the Aleo network.\n     *\n     * @param {string} staker_address - The address of the staker who is claiming the credits.\n     * @param {Partial<ExecuteOptions>} options - Override default execution options.\n     * @returns {Promise<Transaction>} - A promise that resolves to the transaction or an error message.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to claim unbonded credits.\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     *\n     * // Create the claim unbonded transaction object for later use.\n     * const tx = await programManager.buildClaimUnbondPublicTransaction(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     * console.log(tx);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     */\n    async buildClaimUnbondPublicTransaction(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<Transaction> {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"claim_unbond_public\",\n            fee = options.fee || 2,\n            privateFee = false,\n            inputs = [staker_address],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.claim_unbond_public.verifier,\n                cacheKey: \"credits.aleo/claim_unbond_public\"\n            }),\n            program = this.creditsProgram(),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.buildExecutionTransaction(executeOptions);\n    }\n\n    /**\n     * Claim unbonded credits. If credits have been unbonded by the account executing this function, this method will\n     * claim them and add them to the public balance of the account.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"YourPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.claimUnbondPublic(\"aleo1jx8s4dvjepculny4wfrzwyhs3tlyv65r58ns3g6q2gm2esh7ps8sqy9s5j\");\n     *\n     * @param {string} staker_address Address of the staker who is claiming the credits\n     * @param {ExecuteOptions} options\n     * @returns string\n     */\n    async claimUnbondPublic(staker_address: string, options: Partial<ExecuteOptions> = {}): Promise<string> {\n        const tx = <Transaction>await this.buildClaimUnbondPublicTransaction(staker_address, options);\n        return await this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Build a set_validator_state transaction for later usage.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx = await programManager.buildSetValidatorStateTransaction(true);\n     *\n     * // The transaction can be submitted later to the network using the network client.\n     * programManager.networkClient.submitTransaction(tx);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async buildSetValidatorStateTransaction(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const {\n            programName = \"credits.aleo\",\n            functionName = \"set_validator_state\",\n            fee = 1,\n            privateFee = false,\n            inputs = [validator_state.toString()],\n            keySearchParams = new AleoKeyProviderParams({\n                proverUri: CREDITS_PROGRAM_KEYS.set_validator_state.prover,\n                verifierUri: CREDITS_PROGRAM_KEYS.set_validator_state.verifier,\n                cacheKey: \"credits.aleo/set_validator_state\"\n            }),\n            ...additionalOptions\n        } = options;\n\n        const executeOptions: ExecuteOptions = {\n            programName,\n            functionName,\n            fee,\n            privateFee,\n            inputs,\n            keySearchParams,\n            ...additionalOptions\n        };\n\n        return await this.execute(executeOptions);\n    }\n\n    /**\n     * Submit a set_validator_state transaction to the Aleo Network.\n     *\n     * This function allows a validator to set their state to be either opened or closed to new stakers.\n     * When the validator is open to new stakers, any staker (including the validator) can bond or unbond from the validator.\n     * When the validator is closed to new stakers, existing stakers can still bond or unbond from the validator, but new stakers cannot bond.\n     *\n     * This function serves two primary purposes:\n     * 1. Allow a validator to leave the committee, by closing themselves to stakers and then unbonding all of their stakers.\n     * 2. Allow a validator to maintain their % of stake, by closing themselves to allowing more stakers to bond to them.\n     *\n     * @example\n     * // Create a keyProvider to handle key management\n     * const keyProvider = new AleoKeyProvider();\n     * keyProvider.useCache = true;\n     *\n     * // Create a new ProgramManager with the key that will be used to bond credits\n     * const programManager = new ProgramManager(\"https://api.explorer.provable.com/v1\", keyProvider, undefined);\n     * programManager.setAccount(new Account(\"ValidatorPrivateKey\"));\n     *\n     * // Create the bonding transaction\n     * const tx_id = await programManager.setValidatorState(true);\n     *\n     * @returns string\n     * @param {boolean} validator_state\n     * @param {Partial<ExecuteOptions>} options - Override default execution options\n     */\n    async setValidatorState(validator_state: boolean, options: Partial<ExecuteOptions> = {}) {\n        const tx = <string>await this.buildSetValidatorStateTransaction(validator_state, options);\n        return this.networkClient.submitTransaction(tx);\n    }\n\n    /**\n     * Verify a proof of execution from an offline execution\n     *\n     * @param {executionResponse} executionResponse\n     * @returns {boolean} True if the proof is valid, false otherwise\n     */\n    verifyExecution(executionResponse: ExecutionResponse): boolean {\n        try {\n            const execution = <FunctionExecution>executionResponse.getExecution();\n            const function_id = executionResponse.getFunctionId();\n            const program = executionResponse.getProgram();\n            const verifyingKey = executionResponse.getVerifyingKey();\n            return verifyFunctionExecution(execution, verifyingKey, program, function_id);\n        } catch(e) {\n            console.warn(\"The execution was not found in the response, cannot verify the execution\");\n            return false;\n        }\n    }\n\n    /**\n     * Create a program object from a program's source code\n     *\n     * @param {string} program Program source code\n     * @returns {Program} The program object\n     */\n    createProgramFromSource(program: string): Program {\n        return Program.fromString(program);\n    }\n\n    /**\n     * Get the credits program object\n     *\n     * @returns {Program} The credits program object\n     */\n    creditsProgram(): Program {\n        return Program.getCreditsProgram();\n    }\n\n    /**\n     * Verify a program is valid\n     *\n     * @param {string} program The program source code\n     */\n    verifyProgram(program: string): boolean {\n        try {\n            <Program>Program.fromString(program);\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n\n    // Internal utility function for getting a credits.aleo record\n    async getCreditsRecord(amount: number, nonces: string[], record?: RecordPlaintext | string, params?: RecordSearchParams): Promise<RecordPlaintext> {\n        try {\n            return record instanceof RecordPlaintext ? record : RecordPlaintext.fromString(<string>record);\n        } catch (e) {\n            try {\n                const recordProvider = <RecordProvider>this.recordProvider;\n                return <RecordPlaintext>(await recordProvider.findCreditsRecord(amount, true, nonces, params))\n            } catch (e: any) {\n                logAndThrow(`Error finding fee record. Record finder response: '${e.message}'. Please ensure you're connected to a valid Aleo network and a record with enough balance exists.`);\n            }\n        }\n    }\n}\n\n// Ensure the transfer type requires an amount record\nfunction requiresAmountRecord(transferType: string): boolean {\n    return PRIVATE_TRANSFER_TYPES.has(transferType);\n}\n\n// Validate the transfer type\nfunction validateTransferType(transferType: string): string {\n    return VALID_TRANSFER_TYPES.has(transferType) ? transferType :\n        logAndThrow(`Invalid transfer type '${transferType}'. Valid transfer types are 'private', 'privateToPublic', 'public', and 'publicToPrivate'.`);\n}\n\nexport { ProgramManager }\n","import \"./polyfill/shared\";\nimport {VerifyingKey, Metadata} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nconst KEY_STORE = Metadata.baseUrl();\n\ninterface Key {\n    name: string,\n    locator: string,\n    prover: string,\n    verifier: string,\n    verifyingKey: () => VerifyingKey,\n}\n\nfunction convert(metadata: Metadata): Key {\n    // This looks up the method name in VerifyingKey\n    const verifyingKey = (VerifyingKey as any)[metadata.verifyingKey];\n\n    if (!verifyingKey) {\n        throw new Error(\"Invalid method name: \" + metadata.verifyingKey);\n    }\n\n    return {\n        name: metadata.name,\n        locator: metadata.locator,\n        prover: metadata.prover,\n        verifier: metadata.verifier,\n        verifyingKey,\n    };\n}\n\nconst CREDITS_PROGRAM_KEYS = {\n    bond_public: convert(Metadata.bond_public()),\n    bond_validator: convert(Metadata.bond_validator()),\n    claim_unbond_public: convert(Metadata.claim_unbond_public()),\n    fee_private: convert(Metadata.fee_private()),\n    fee_public: convert(Metadata.fee_public()),\n    inclusion: convert(Metadata.inclusion()),\n    join: convert(Metadata.join()),\n    set_validator_state: convert(Metadata.set_validator_state()),\n    split: convert(Metadata.split()),\n    transfer_private: convert(Metadata.transfer_private()),\n    transfer_private_to_public: convert(Metadata.transfer_private_to_public()),\n    transfer_public: convert(Metadata.transfer_public()),\n    transfer_public_as_signer: convert(Metadata.transfer_public_as_signer()),\n    transfer_public_to_private: convert(Metadata.transfer_public_to_private()),\n    unbond_public: convert(Metadata.unbond_public()),\n    getKey: function(key: string): Key {\n        if (this.hasOwnProperty(key)) {\n            return (this as any)[key] as Key;\n        } else {\n            throw new Error(`Key \"${key}\" not found.`);\n        }\n    }\n};\n\nconst PRIVATE_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n]);\nconst VALID_TRANSFER_TYPES = new Set([\n    \"transfer_private\",\n    \"private\",\n    \"transferPrivate\",\n    \"transfer_private_to_public\",\n    \"privateToPublic\",\n    \"transferPrivateToPublic\",\n    \"transfer_public\",\n    \"transfer_public_as_signer\",\n    \"public\",\n    \"public_as_signer\",\n    \"transferPublic\",\n    \"transferPublicAsSigner\",\n    \"transfer_public_to_private\",\n    \"publicToPrivate\",\n    \"publicAsSigner\",\n    \"transferPublicToPrivate\",\n]);\nconst PRIVATE_TRANSFER = new Set([\n    \"private\",\n    \"transfer_private\",\n    \"transferPrivate\",\n]);\nconst PRIVATE_TO_PUBLIC_TRANSFER = new Set([\n    \"private_to_public\",\n    \"privateToPublic\",\n    \"transfer_private_to_public\",\n    \"transferPrivateToPublic\",\n]);\nconst PUBLIC_TRANSFER = new Set([\n    \"public\",\n    \"transfer_public\",\n    \"transferPublic\",\n]);\nconst PUBLIC_TRANSFER_AS_SIGNER = new Set([\n    \"public_as_signer\",\n    \"transfer_public_as_signer\",\n    \"transferPublicAsSigner\",\n]);\nconst PUBLIC_TO_PRIVATE_TRANSFER = new Set([\n    \"public_to_private\",\n    \"publicToPrivate\",\n    \"transfer_public_to_private\",\n    \"transferPublicToPrivate\",\n]);\n\nfunction logAndThrow(message: string): never {\n    console.error(message);\n    throw new Error(message);\n}\n\nimport { Account } from \"./account\";\nimport { AleoNetworkClient, ProgramImports } from \"./network-client\";\nimport { Block } from \"./models/block\";\nimport { Execution } from \"./models/execution\";\nimport { Input } from \"./models/input\";\nimport { Output } from \"./models/output\";\nimport { TransactionModel } from \"./models/transactionModel\";\nimport { Transition } from \"./models/transition\";\nimport {\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    CachedKeyPair,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    KeySearchParams,\n} from \"./function-key-provider\";\nimport {\n    OfflineKeyProvider,\n    OfflineSearchParams\n} from \"./offline-key-provider\";\nimport {\n    BlockHeightSearch,\n    NetworkRecordProvider,\n    RecordProvider,\n    RecordSearchParams,\n} from \"./record-provider\";\n\n// @TODO: This function is no longer needed, remove it.\nasync function initializeWasm() {\n    console.warn(\"initializeWasm is deprecated, you no longer need to use it\");\n}\n\nexport { createAleoWorker } from \"./managed-worker\";\n\nexport { ProgramManager } from \"./program-manager\";\n\nexport {\n    Address,\n    Execution as FunctionExecution,\n    ExecutionResponse,\n    Field,\n    OfflineQuery,\n    PrivateKey,\n    PrivateKeyCiphertext,\n    Program,\n    ProgramManager as ProgramManagerBase,\n    ProvingKey,\n    RecordCiphertext,\n    RecordPlaintext,\n    Signature,\n    Transaction,\n    VerifyingKey,\n    ViewKey,\n    initThreadPool,\n    verifyFunctionExecution,\n} from \"@provablehq/wasm/%%NETWORK%%.js\";\n\nexport { initializeWasm };\n\nexport {\n    Account,\n    AleoKeyProvider,\n    AleoKeyProviderParams,\n    AleoKeyProviderInitParams,\n    AleoNetworkClient,\n    Block,\n    BlockHeightSearch,\n    CachedKeyPair,\n    Execution,\n    FunctionKeyPair,\n    FunctionKeyProvider,\n    Input,\n    Key,\n    KeySearchParams,\n    NetworkRecordProvider,\n    ProgramImports,\n    OfflineKeyProvider,\n    OfflineSearchParams,\n    Output,\n    RecordProvider,\n    RecordSearchParams,\n    TransactionModel,\n    Transition,\n    CREDITS_PROGRAM_KEYS,\n    KEY_STORE,\n    PRIVATE_TRANSFER,\n    PRIVATE_TO_PUBLIC_TRANSFER,\n    PRIVATE_TRANSFER_TYPES,\n    PUBLIC_TRANSFER,\n    PUBLIC_TRANSFER_AS_SIGNER,\n    PUBLIC_TO_PRIVATE_TRANSFER,\n    VALID_TRANSFER_TYPES,\n    logAndThrow,\n};\n"],"names":["WasmProgramManager"],"mappings":"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"}